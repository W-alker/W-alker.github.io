<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录博客建站过程</title>
    <url>/2020/12/27/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/</url>
    <content><![CDATA[<blockquote>
<p>很早就有建一个博客的想法，主要想记录一些学习过程、发布和分享一些文章什么的。2020年中开始花了大概两个半月学了前端，就尝试写一个博客，但是很麻烦，过程也相当曲折，写了大概三分之一还是发现自己的技术很差很差，后端也只是浅尝辄止，很多东西都无法实现，就停止了建博客。断了几个月的前端学习后，这几天突然看到收藏夹的Hexo博客教学视频，心血来潮就学着花了一天建立了一个博客。这里简单记录下建站过程和一些踩坑。</p>
</blockquote>
<h2 id="教程及主题"><a href="#教程及主题" class="headerlink" title="教程及主题"></a>教程及主题</h2><p>教程视频：<a href="https://www.bilibili.com/video/BV1Np4y1Y7SW">从零开始搭建个人博客 | 手把手教你使用Hexo框架4步完成个人博客搭建 </a></p>
<p>使用主题：<a href="https://shen-yu.gitee.io/">Ayer</a>  |  <a href="https://github.com/Shen-Yu/hexo-theme-ayer">Github地址</a>  |  <a href="https://shen-yu.gitee.io/2019/ayer/">ayer中文说明</a></p>
<p>Hexo文档：<a href="https://hexo.io/zh-cn/docs/">hexo中文文档</a></p>
<p><img src="https://pic.downk.cc/item/5fe9de223ffa7d37b33ed34f.jpg"></p>
<a id="more"></a>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong><em>注意，本篇文章仅作记录建站过程和解决一些问题的方法，如果你使用该主题也出现了些问题，可以略作参考。或者你是新手并且也想使用该主题，可以阅读本文。</em></strong></p>
<h2 id="过程及踩坑"><a href="#过程及踩坑" class="headerlink" title="过程及踩坑"></a>过程及踩坑</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Hexo的教学其实已经屡见不鲜了，但是我个人还是比较喜欢视频教学，找学习视频自然上B站。主要过程按照教学视频来就好。其实最主要修改的还是根目录和主题文件夹下的<font color="red"> _config.yml</font>文件，根目录下的<font color="red"> _config.yml</font>文件可以按照hexo的中文文档进行修改，主题文件夹中的最好参考该主题的中文说明（该主题的中文说明还是很简单易懂的）。最好还是阅读下hexo的中文文档，主题的中文说明更是必看。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果想更改本主题的配置，可以参考这篇文章：<a href="https://blog.csdn.net/qq_35982918/article/details/106728754">Hexo博客Ayer主题自定义配置</a></p>
<h3 id="页面404？"><a href="#页面404？" class="headerlink" title="页面404？"></a>页面404？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;最开始更换完ayer主题后，只有主页和归档能够显示，其他页面会报404，是因为这些页面都没有创建。需要使用命令</p>
<p>​    <code>hexo new page 要创建的页面</code></p>
<p>注意命令应当是在根目录下运行，例如要创建分类页面，应当使用</p>
<p>​    <code>hexo new page categories</code></p>
<p>如果要标签页面就将页面名改为  tags：</p>
<p>​    <code>hexo new page tags</code></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果觉得侧边栏菜单页面过多，直接更改主题文件夹下的<font color="red">_config.yml</font>文件，直接在  <strong>#menu</strong>  选项下删除即可，侧边栏就不会显示。其实这里可以注意下， <strong>#menu</strong> 选项下的“链接”其实是和根目录  <font color="blue">/source</font> 文件夹下的页面名是一一对应的。例如：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这是主题文件夹下的<font color="red">_config.yml</font>文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">摄影:</span> <span class="string">/photos</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这是根目录<font color="blue"> /source</font> 文件夹下的文件：</p>
<p><img src="https://pic.downk.cc/item/5fe9ccd73ffa7d37b322cd6d.png" alt="演示图片"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不难看出除了 <font color="blue">/_posts</font> 文件夹是用来保存文章的，其他的文件夹名和上面是相互对应的。<em>注意路径名不要出错。</em></p>
<h3 id="分类和标签页面"><a href="#分类和标签页面" class="headerlink" title="分类和标签页面"></a>分类和标签页面</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;百度了怎么添加分类和标签页面，可以参考：<a href="https://blog.csdn.net/weixin_33857230/article/details/91474562">Hexo 添加分类及标签</a>。一开始给markdown文章添加了tags和categories，在文章界面上确实显示了标签和分类，但是分类和标签页面却仍然是空白，苦恼了半天，最后终于可找到了解决办法：<a href="https://blog.csdn.net/weixin_42118981/article/details/109462491">解决hexo下分类和标签无法显示的问题</a>，将 <font color="blue">/tags</font>  和<font color="blue">  /categories </font>文件夹下的index.md文件改成如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-28 10:17:01</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">categories</span>   <span class="comment">#这里是解决问题的核心</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>   <span class="comment"># 这里是关闭评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-28 10:17:49</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">tags</span>   <span class="comment">#同上，必须加上此语句</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果友链等页面也出现该问题，解决办法一致。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;写文章使用markdown的文法还是很舒服的，如果不会可以参考一下教程，十几分钟就能学会：<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程 | Markdown 教程</a>。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;插入图片有点麻烦，有一篇参考文章说的比较全：<a href="https://www.5yun.org/20794.html">Hexo文章插入图片</a>。尝试了之后还是选择了使用图床：<a href="https://www.superbed.cn/">聚合图床</a>。图片上传后可以获得一个URL地址，插入图片时直接写上链接就好。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我的博客里用了一个网易云音乐的插件，是该主题中自带的，在主题文件夹下的<font color="red"> _config.yml  </font>里可以找到，将autoplay改为true即可，也可以更改默认音乐。这个插件局限性有点大，可以参考原开发者的博客，有播放器插件的页面。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;该主题已经集成了一些插件，比如字数统计，访问量统计，评论插件等。如果想要使用其他的插件，请参考hexo插件文档。</p>
<h3 id="Github部署"><a href="#Github部署" class="headerlink" title="Github部署"></a>Github部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;部署视频中已经有说明，如果想要上传更新记住以下命令：</p>
<p><code>hexo clean</code>     主要用来清除缓存等，建议每次有更新都使用该命令</p>
<p><code>hexo g</code>    </p>
<p><code>hexo s</code>    仅在本地开启一个预览，可以直观的看到变化</p>
<p><code>hexo d</code>    上传更新</p>
<h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在观看GitHub上传后的文件后，根目录文件大致是这样：</p>
<p><img src="https://pic.downk.cc/item/5fe9f5f83ffa7d37b36711ce.png"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;再看到本地目录下的public文件夹中的文件，大致是这样的：</p>
<p><img src="https://pic.downk.cc/item/5fe9f67e3ffa7d37b3681943.png"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;并且about、archives、friends文件夹里都有一个index.html文件。再加上上面主题目录下 _config.yml 文件中 <strong>#menu</strong> 项下的“链接”，这才发现部署到github仓库根目录上的其实就是public文件夹中的所有文件，根目录的index.html作为主页面，菜单栏的链接直接指向其他页面的文件夹路径，因此里面的index.html文件自然就成为了相应页面。<em>这也就意味着如果想要自定义页面，可以直接修改public文件夹中的html文件。</em></p>
<h2 id="感谢原开发者"><a href="#感谢原开发者" class="headerlink" title="感谢原开发者"></a>感谢原开发者</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;大概就是这些，hexo创建博客还是很简单的，功能也相当强大，而且零成本，花点时间就可以做出来。最后感谢该主题的开发者：Shen-Yu。这是他的博客：<a href="https://shen-yu.gitee.io/">https://shen-yu.gitee.io/</a>，这是他的Github：<a href="https://github.com/Shen-Yu">https://github.com/Shen-Yu</a>。如果你也想使用该主题别忘了给开发者一个star。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果有问题可以在评论区留言。谢谢观看。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp学习笔记</title>
    <url>/2020/12/29/gulp%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>学习gulp的简单笔记。原教学视频：<a href="https://www.bilibili.com/video/BV1NE411T7Z2?p=396">https://www.bilibili.com/video/BV1NE411T7Z2?p=396</a>。</p>
</blockquote>
<h2 id="gulp基本使用流程"><a href="#gulp基本使用流程" class="headerlink" title="gulp基本使用流程"></a>gulp基本使用流程</h2><ol>
<li>初始化项目目录：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm init      &#x2F;&#x2F;如果出错改为npm指令</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装到项目文件夹：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install gulp@3.9.1 --save-dev</span><br><span class="line">cnpm i gulp-scss gulp-minify-css gulp-rename -D    &#x2F;&#x2F;一次下载多个第三方插件</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>创建一个gulpfile.js文件</p>
</li>
<li><p>在gulpfile.js文件中编写任务</p>
<p>(全局配置好命令行工具，之后会多出gulp命令行任务）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-cli -g</span><br></pre></td></tr></table></figure></li>
<li><p>在控制台通过    gulp  任务名    ，运行编写好的任务</p>
<a id="more"></a>

</li>
</ol>
<h2 id="common-Js规范使用模块"><a href="#common-Js规范使用模块" class="headerlink" title="common.Js规范使用模块"></a>common.Js规范使用模块</h2><p>1.require()   将这个模块引入 </p>
<p>2.使用这个模块上的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);  <span class="comment">//引入一个gulp函数库</span></span><br><span class="line"><span class="comment">//编写第一个任务</span></span><br><span class="line"><span class="comment">//参数1：任务的名字，自定义    参数2：回调函数，任务执行的功能</span></span><br><span class="line">gulp.task(<span class="string">&#x27;hello&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp基本函数"><a href="#gulp基本函数" class="headerlink" title="gulp基本函数"></a>gulp基本函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src()    <span class="comment">//找到源文件路径</span></span><br><span class="line">gulp.dest()    <span class="comment">//找到目标文件路径，如果该文件路径不存在则会自动创建</span></span><br><span class="line">gulp.task()    <span class="comment">//建立gulp任务</span></span><br><span class="line">gulp.watch()    <span class="comment">//监控文件的变化</span></span><br><span class="line">.pipe()    <span class="comment">//理解程序运行管道</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">使用实例</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);  <span class="comment">//引入一个gulp函数库</span></span><br><span class="line">gulp.task(<span class="string">&#x27;hello&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;       <span class="comment">//建立任务</span></span><br><span class="line">    gulp.src(<span class="string">&quot;./src/css/base.css&quot;</span>)    <span class="comment">//获取要处理的文件</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/css&quot;</span>));   <span class="comment">//放入指定文件夹</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp使用监听"><a href="#gulp使用监听" class="headerlink" title="gulp使用监听"></a>gulp使用监听</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.watch()  </span><br><span class="line"><span class="comment">//第一个参数：文件监听的路径；    第二个参数：要执行的任务</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp使用插件"><a href="#gulp使用插件" class="headerlink" title="gulp使用插件"></a>gulp使用插件</h2><p>网址：<a href="https://gulpjs.com/plugins/">gulp插件</a></p>
<p>使用步骤：</p>
<p>&lt;1&gt; 下载插件到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install 插件名 --save-dev</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt;通过require()  引入文件</p>
<p>&lt;3&gt;查阅插件用法并使用</p>
<h3 id="压缩html-gulp-htmlmin"><a href="#压缩html-gulp-htmlmin" class="headerlink" title="压缩html  (gulp-htmlmin)"></a>压缩html  (gulp-htmlmin)</h3><h3 id="压缩css-gulp-csso"><a href="#压缩css-gulp-csso" class="headerlink" title="压缩css  (gulp-csso)"></a>压缩css  (gulp-csso)</h3><h3 id="重命名插件-gulp-rename"><a href="#重命名插件-gulp-rename" class="headerlink" title="重命名插件 (gulp-rename)"></a>重命名插件 (gulp-rename)</h3><h3 id="处理js文件插件"><a href="#处理js文件插件" class="headerlink" title="处理js文件插件"></a>处理js文件插件</h3><ul>
<li>gulp-conact    合并文件</li>
<li>gulp-uglify    压缩js 文件</li>
<li>gulp-babel    ES6=&gt;ES5语法转换</li>
</ul>
<h3 id="公共文件包含-gulp-file-include"><a href="#公共文件包含-gulp-file-include" class="headerlink" title="公共文件包含  (gulp-file-include)"></a>公共文件包含  (gulp-file-include)</h3><h3 id="启动服务器-gulp-connect"><a href="#启动服务器-gulp-connect" class="headerlink" title="启动服务器  (gulp-connect)"></a>启动服务器  (gulp-connect)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> connect=<span class="built_in">require</span>(<span class="string">&quot;gulp-connect&quot;</span>);</span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">      root:<span class="string">&quot;dist&quot;</span>,  <span class="comment">//设置根目录</span></span><br><span class="line">      port:<span class="number">8000</span>,</span><br><span class="line">      <span class="comment">//livereload:true  //启动实时刷新</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><h3 id="项目依赖："><a href="#项目依赖：" class="headerlink" title="项目依赖："></a>项目依赖：</h3><p>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包。</p>
<p>使用npm install 包名命令下载的文件会默认被添加到package.json文件的dependencies字段中。</p>
<p>重新安装时使用   npm i –production    可以只下载项目依赖。</p>
<h3 id="开发依赖："><a href="#开发依赖：" class="headerlink" title="开发依赖："></a>开发依赖：</h3><p>在项目的开发阶段需要依赖，线上运营阶段不需要的第三方包。</p>
<p>使用npm install 包名 –save-dev命令将包添加到package.json文件的devDependencies字段中。</p>
<p>使用    npm install   会重新下载所有依赖。</p>
<h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>用于记录模块与模块之间复杂的依赖关系。</p>
<ul>
<li><p>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题。</p>
</li>
<li><p>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可。</p>
</li>
</ul>
<h2 id="一份我的gulpfile-js文件实例"><a href="#一份我的gulpfile-js文件实例" class="headerlink" title="一份我的gulpfile.js文件实例"></a>一份我的gulpfile.js文件实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意node和gulp版本，版本冲突可能会发生错误</span></span><br><span class="line"><span class="keyword">const</span> gulp=<span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin=<span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileinclude=<span class="built_in">require</span>(<span class="string">&#x27;gulp-file-include&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rename=<span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> csso = <span class="built_in">require</span>(<span class="string">&#x27;gulp-csso&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> imgmin=<span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.toString());</span><br><span class="line">    <span class="built_in">this</span>.emit(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//html文件压缩</span></span><br><span class="line">gulp.task(<span class="string">&quot;htmlmin&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">&quot;src/*.html&quot;</span>)</span><br><span class="line">    .pipe(fileinclude())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//css代码压缩</span></span><br><span class="line">gulp.task(<span class="string">&quot;cssmin&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&quot;src/css/*.scss&quot;</span>,<span class="string">&quot;src/css/*.css&quot;</span>])</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(csso())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*     .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">        suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">    &#125;)) */</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/css&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//js语法转换及代码压缩</span></span><br><span class="line">gulp.task(<span class="string">&#x27;jsmin&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./src/js/*.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//可以判断当前代码运行环境并将代码转化为当前运行环境支持的代码</span></span><br><span class="line">            presets: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*         .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">            suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">        &#125;)) */</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/js&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">&#x27;jsmin-module&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./src/js/modules/*.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//可以判断当前代码运行环境并将代码转化为当前运行环境支持的代码</span></span><br><span class="line">            presets: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*         .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">            suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">        &#125;)) */</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/js/modules&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//图片拷贝处理</span></span><br><span class="line">gulp.task(<span class="string">&quot;images&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/img/*&#x27;</span>)</span><br><span class="line">        <span class="comment">//.pipe(imgmin())</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./dist/img&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//服务器任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">&quot;./dist/&quot;</span>,</span><br><span class="line">        port: <span class="number">5500</span>,</span><br><span class="line">        livereload: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/*.html&quot;</span>, [<span class="string">&quot;htmlmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/common/*.html&quot;</span>, [<span class="string">&quot;htmlmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/css/*.css&quot;</span>,[<span class="string">&quot;cssmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/css/*.scss&quot;</span>,[<span class="string">&quot;cssmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/js/*.js&quot;</span>,[<span class="string">&quot;jsmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/js/modules/*.js&quot;</span>,[<span class="string">&quot;jsmin-module&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/img/*&quot;</span>, [<span class="string">&quot;images&quot;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">&quot;build&quot;</span>,[<span class="string">&#x27;htmlmin&#x27;</span>,<span class="string">&#x27;cssmin&#x27;</span>,<span class="string">&#x27;jsmin&#x27;</span>,<span class="string">&#x27;jsmin-module&#x27;</span>,<span class="string">&#x27;images&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&quot;watch&quot;</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>前端</category>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>gulp</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
