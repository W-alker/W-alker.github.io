<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ajax学习笔记</title>
    <url>/2020/12/29/ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>原学习视频地址：<a href="https://www.bilibili.com/video/BV1NE411T7Z2?p=367">https://www.bilibili.com/video/BV1NE411T7Z2?p=367</a> ，p367-p371。</p>
</blockquote>
<h2 id="ajax的应用场景"><a href="#ajax的应用场景" class="headerlink" title="ajax的应用场景"></a>ajax的应用场景</h2><ol>
<li><p>页面上拉下载更多数据</p>
</li>
<li><p>列表数据无刷新分页</p>
</li>
<li><p>表单项离开焦点数据验证</p>
</li>
<li><p>搜索框提示文字下拉列表</p>
</li>
<li><p>……</p>
<a id="more"></a>

</li>
</ol>
<h2 id="ajax一些基本语法"><a href="#ajax一些基本语法" class="headerlink" title="ajax一些基本语法"></a>ajax一些基本语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">    <span class="comment">//IE8下使用 ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*调用open</span></span><br><span class="line"><span class="comment">  第一个参数：请求方式  get、post等</span></span><br><span class="line"><span class="comment">  第二个参数：url</span></span><br><span class="line"><span class="comment">  第三个参数：是否异步，true为异步</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="comment">//调用send</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">/*等待数据响应</span></span><br><span class="line"><span class="comment">  readystatechange  事件类型</span></span><br><span class="line"><span class="comment">  xhr.readyState  发生变化时候调用</span></span><br><span class="line"><span class="comment">  参数：0  (初始化)还没有调用open方法</span></span><br><span class="line"><span class="comment">       1  (载入)已调用send方法，正在发送请求</span></span><br><span class="line"><span class="comment">       2  (载入完成)send方法已完成，收到全部响应内容</span></span><br><span class="line"><span class="comment">       3  (解析)正在解析响应内容</span></span><br><span class="line"><span class="comment">       4  (完成)响应内容解析完成，可以在客户端调用了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">//判断本次下载的状态是多少</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">            alert(<span class="string">&#x27;xhr.responseText&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;ERROR:&#x27;</span>+xhr.status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try_catch"></a>try_catch</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    尝试执行的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">    <span class="comment">//error  错误对象，try中代码执行的异常信息</span></span><br><span class="line">    补救代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//try_throw_catch手动抛出异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    尝试执行的代码</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();  <span class="comment">//用户故意抛出的异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">    补救代码</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="GET和POST请求"><a href="#GET和POST请求" class="headerlink" title="GET和POST请求"></a>GET和POST请求</h2><p>HTML标签form的action和method属性</p>
<p>​    action    点击submit后要跳转到的链接 </p>
<p>​    method    表单要提交数据的方式，get、post等</p>
<h3 id="GET（默认）"><a href="#GET（默认）" class="headerlink" title="GET（默认）"></a>GET（默认）</h3><ul>
<li><p>提交方式：直接将数据拼接在url后进行提交，通过？进行拼接，查询字符串</p>
</li>
<li><p>好处：简单</p>
</li>
<li><p>缺点：</p>
<pre><code>   1. 不安全
      2. 最大2kb
      3. 无法实现上传</code></pre>
</li>
<li><p>ajax的post提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接以字符串拼接的方式写在后面</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;1.get.php?username=yyy&amp;age=18&amp;password=123a&#x27;</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3></li>
<li><p>提交方式：通过浏览器内部进行提交</p>
</li>
<li><p>好处：安全 、理论上无上限、可以上传</p>
</li>
<li><p>缺点：较复杂</p>
</li>
<li><p>form中需要添加enctype属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>ajax的get请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send方法之前需要设置请求的格式</span></span><br><span class="line">xhr.sendRequestHeader(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要通过send方法进行提交查询字符串</span></span><br><span class="line"><span class="comment">//?name=value&amp;age=value2    search方式</span></span><br><span class="line"><span class="comment">//name=value&amp;age=value2  queryString方式</span></span><br><span class="line">xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;1.post.php&#x27;</span>);</span><br><span class="line">xhr.send(<span class="string">&#x27;username=yyy&amp;age=18&amp;password=123a&#x27;</span>);       <span class="comment">//send中使用queryString方式</span></span><br></pre></td></tr></table></figure>
<h2 id="ajax函数封装"><a href="#ajax函数封装" class="headerlink" title="ajax函数封装"></a>ajax函数封装</h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用解构方式定义形参，method默认为get请求</span></span><br><span class="line"><span class="comment">//success  数据下载成功执行的函数</span></span><br><span class="line"><span class="comment">//error  数据下载失败执行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$ajax</span>(<span class="params">&#123;method=<span class="string">&#x27;get&#x27;</span>,url,data，success,error&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        xhr=<span class="keyword">new</span> XMLHttpRequest(); </span><br><span class="line">    &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">        xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断如果数据存在，转化为查询字符串</span></span><br><span class="line">    <span class="keyword">if</span>(data)&#123;</span><br><span class="line">        data=queryString(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当为get请求且有数据时使用get的方式拼接字符串</span></span><br><span class="line">    <span class="keyword">if</span>(method==<span class="string">&#x27;get&#x27;</span> &amp;&amp; data)&#123;</span><br><span class="line">        url+=<span class="string">&quot;?&quot;</span>+data;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//传输数据时根据请求方式使用不同方式</span></span><br><span class="line">    <span class="keyword">if</span>(method==<span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr.sendRequestHeader(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等待数据响应</span></span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//判断本次下载的状态是多少</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    如何处理数据的方式不确定</span></span><br><span class="line"><span class="comment">                    使用回调函数</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span>(success)</span><br><span class="line">                   success(xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(error)</span><br><span class="line">                    error();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将用户需传入的对象转化为查询字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        str+=attr+<span class="string">&quot;=&quot;</span>+obj[attr]+<span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str.substring(<span class="number">0</span>,str.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用案例，使用对象和解构传参</span></span><br><span class="line">button.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $ajax(&#123;</span><br><span class="line">        method:<span class="string">&#x27;post&#x27;</span>,   <span class="comment">//若为get可不写</span></span><br><span class="line">        url:<span class="string">&#x27;1.post.php&#x27;</span>,</span><br><span class="line">        data:&#123;      <span class="comment">//可直接传入对象</span></span><br><span class="line">            username:<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">            age:<span class="number">18</span>;</span><br><span class="line">            passord:<span class="string">&#x27;123ab&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">            alert(result);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">            alert(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="补充：JSON对象的两种方法"><a href="#补充：JSON对象的两种方法" class="headerlink" title="补充：JSON对象的两种方法"></a>补充：JSON对象的两种方法</h2><ul>
<li><p><code>JSON.stringfy()</code>    数据结构 =&gt; 字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>对象</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">100</span>,<span class="literal">true</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">JSON</span>.stringfy(arr);</span><br><span class="line">alert(str);    <span class="comment">//&#x27;[100,true,&#x27;hello&#x27;]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>数组</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    username:<span class="string">&#x27;nic&#x27;</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    password:<span class="string">&#x27;123ab&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=JSOn.stringfy(obj);</span><br><span class="line">alert(str);    <span class="comment">//&#x27;&#123;username:&#x27;nic&#x27;,age:18,password:&#x27;123ab&#x27;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>JSON.parse()</code>   json格式字符串 =&gt; 数据结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;[100,true,&#x27;</span>hello<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arrr=<span class="built_in">JSON</span>.parse(str);</span><br><span class="line">alert(arr);    <span class="comment">//[100,true,&#x27;hello&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>php中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">JSON.encode();    <span class="comment">//数据结构转化为字符串</span></span><br><span class="line">JSON.decode();    <span class="comment">//字符串转化为数据结构</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习笔记</category>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>学习笔记</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp学习笔记</title>
    <url>/2020/12/29/gulp%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>学习gulp的简单笔记。原教学视频：<a href="https://www.bilibili.com/video/BV1NE411T7Z2?p=396">https://www.bilibili.com/video/BV1NE411T7Z2?p=396</a>。</p>
</blockquote>
<h2 id="gulp基本使用流程"><a href="#gulp基本使用流程" class="headerlink" title="gulp基本使用流程"></a>gulp基本使用流程</h2><ol>
<li>初始化项目目录：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm init      &#x2F;&#x2F;如果出错改为npm指令</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装到项目文件夹：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install gulp@3.9.1 --save-dev</span><br><span class="line">cnpm i gulp-scss gulp-minify-css gulp-rename -D    &#x2F;&#x2F;一次下载多个第三方插件</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>创建一个gulpfile.js文件</p>
</li>
<li><p>在gulpfile.js文件中编写任务</p>
<p>(全局配置好命令行工具，之后会多出gulp命令行任务）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-cli -g</span><br></pre></td></tr></table></figure></li>
<li><p>在控制台通过    gulp  任务名    ，运行编写好的任务</p>
<a id="more"></a>

</li>
</ol>
<h2 id="common-Js规范使用模块"><a href="#common-Js规范使用模块" class="headerlink" title="common.Js规范使用模块"></a>common.Js规范使用模块</h2><p>1.require()   将这个模块引入 </p>
<p>2.使用这个模块上的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);  <span class="comment">//引入一个gulp函数库</span></span><br><span class="line"><span class="comment">//编写第一个任务</span></span><br><span class="line"><span class="comment">//参数1：任务的名字，自定义    参数2：回调函数，任务执行的功能</span></span><br><span class="line">gulp.task(<span class="string">&#x27;hello&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp基本函数"><a href="#gulp基本函数" class="headerlink" title="gulp基本函数"></a>gulp基本函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.src()    <span class="comment">//找到源文件路径</span></span><br><span class="line">gulp.dest()    <span class="comment">//找到目标文件路径，如果该文件路径不存在则会自动创建</span></span><br><span class="line">gulp.task()    <span class="comment">//建立gulp任务</span></span><br><span class="line">gulp.watch()    <span class="comment">//监控文件的变化</span></span><br><span class="line">.pipe()    <span class="comment">//理解程序运行管道</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">使用实例</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);  <span class="comment">//引入一个gulp函数库</span></span><br><span class="line">gulp.task(<span class="string">&#x27;hello&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;       <span class="comment">//建立任务</span></span><br><span class="line">    gulp.src(<span class="string">&quot;./src/css/base.css&quot;</span>)    <span class="comment">//获取要处理的文件</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/css&quot;</span>));   <span class="comment">//放入指定文件夹</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp使用监听"><a href="#gulp使用监听" class="headerlink" title="gulp使用监听"></a>gulp使用监听</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.watch()  </span><br><span class="line"><span class="comment">//第一个参数：文件监听的路径；    第二个参数：要执行的任务</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="gulp使用插件"><a href="#gulp使用插件" class="headerlink" title="gulp使用插件"></a>gulp使用插件</h2><p>网址：<a href="https://gulpjs.com/plugins/">gulp插件</a></p>
<p>使用步骤：</p>
<p>&lt;1&gt; 下载插件到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install 插件名 --save-dev</span><br></pre></td></tr></table></figure>
<p>&lt;2&gt;通过require()  引入文件</p>
<p>&lt;3&gt;查阅插件用法并使用</p>
<h3 id="压缩html-gulp-htmlmin"><a href="#压缩html-gulp-htmlmin" class="headerlink" title="压缩html  (gulp-htmlmin)"></a>压缩html  (gulp-htmlmin)</h3><h3 id="压缩css-gulp-csso"><a href="#压缩css-gulp-csso" class="headerlink" title="压缩css  (gulp-csso)"></a>压缩css  (gulp-csso)</h3><h3 id="重命名插件-gulp-rename"><a href="#重命名插件-gulp-rename" class="headerlink" title="重命名插件 (gulp-rename)"></a>重命名插件 (gulp-rename)</h3><h3 id="处理js文件插件"><a href="#处理js文件插件" class="headerlink" title="处理js文件插件"></a>处理js文件插件</h3><ul>
<li>gulp-conact    合并文件</li>
<li>gulp-uglify    压缩js 文件</li>
<li>gulp-babel    ES6=&gt;ES5语法转换</li>
</ul>
<h3 id="公共文件包含-gulp-file-include"><a href="#公共文件包含-gulp-file-include" class="headerlink" title="公共文件包含  (gulp-file-include)"></a>公共文件包含  (gulp-file-include)</h3><h3 id="启动服务器-gulp-connect"><a href="#启动服务器-gulp-connect" class="headerlink" title="启动服务器  (gulp-connect)"></a>启动服务器  (gulp-connect)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> connect=<span class="built_in">require</span>(<span class="string">&quot;gulp-connect&quot;</span>);</span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">      root:<span class="string">&quot;dist&quot;</span>,  <span class="comment">//设置根目录</span></span><br><span class="line">      port:<span class="number">8000</span>,</span><br><span class="line">      <span class="comment">//livereload:true  //启动实时刷新</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><h3 id="项目依赖："><a href="#项目依赖：" class="headerlink" title="项目依赖："></a>项目依赖：</h3><p>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包。</p>
<p>使用npm install 包名命令下载的文件会默认被添加到package.json文件的dependencies字段中。</p>
<p>重新安装时使用   npm i –production    可以只下载项目依赖。</p>
<h3 id="开发依赖："><a href="#开发依赖：" class="headerlink" title="开发依赖："></a>开发依赖：</h3><p>在项目的开发阶段需要依赖，线上运营阶段不需要的第三方包。</p>
<p>使用npm install 包名 –save-dev命令将包添加到package.json文件的devDependencies字段中。</p>
<p>使用    npm install   会重新下载所有依赖。</p>
<h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>用于记录模块与模块之间复杂的依赖关系。</p>
<ul>
<li><p>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题。</p>
</li>
<li><p>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可。</p>
</li>
</ul>
<h2 id="一份我的gulpfile-js文件实例"><a href="#一份我的gulpfile-js文件实例" class="headerlink" title="一份我的gulpfile.js文件实例"></a>一份我的gulpfile.js文件实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意node和gulp版本，版本冲突可能会发生错误</span></span><br><span class="line"><span class="keyword">const</span> gulp=<span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin=<span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileinclude=<span class="built_in">require</span>(<span class="string">&#x27;gulp-file-include&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rename=<span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> csso = <span class="built_in">require</span>(<span class="string">&#x27;gulp-csso&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> imgmin=<span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.toString());</span><br><span class="line">    <span class="built_in">this</span>.emit(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//html文件压缩</span></span><br><span class="line">gulp.task(<span class="string">&quot;htmlmin&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">&quot;src/*.html&quot;</span>)</span><br><span class="line">    .pipe(fileinclude())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//css代码压缩</span></span><br><span class="line">gulp.task(<span class="string">&quot;cssmin&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&quot;src/css/*.scss&quot;</span>,<span class="string">&quot;src/css/*.css&quot;</span>])</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">    .pipe(csso())</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*     .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">        suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">    &#125;)) */</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/css&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//js语法转换及代码压缩</span></span><br><span class="line">gulp.task(<span class="string">&#x27;jsmin&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./src/js/*.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//可以判断当前代码运行环境并将代码转化为当前运行环境支持的代码</span></span><br><span class="line">            presets: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*         .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">            suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">        &#125;)) */</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/js&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">&#x27;jsmin-module&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./src/js/modules/*.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//可以判断当前代码运行环境并将代码转化为当前运行环境支持的代码</span></span><br><span class="line">            presets: [<span class="string">&#x27;@babel/env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .on(<span class="string">&#x27;error&#x27;</span>, showError)</span><br><span class="line"><span class="comment">/*         .pipe(rename(&#123;</span></span><br><span class="line"><span class="comment">            suffix:&quot;.min&quot;</span></span><br><span class="line"><span class="comment">        &#125;)) */</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/js/modules&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//图片拷贝处理</span></span><br><span class="line">gulp.task(<span class="string">&quot;images&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/img/*&#x27;</span>)</span><br><span class="line">        <span class="comment">//.pipe(imgmin())</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./dist/img&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//服务器任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">&quot;./dist/&quot;</span>,</span><br><span class="line">        port: <span class="number">5500</span>,</span><br><span class="line">        livereload: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/*.html&quot;</span>, [<span class="string">&quot;htmlmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/common/*.html&quot;</span>, [<span class="string">&quot;htmlmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/css/*.css&quot;</span>,[<span class="string">&quot;cssmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/css/*.scss&quot;</span>,[<span class="string">&quot;cssmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/js/*.js&quot;</span>,[<span class="string">&quot;jsmin&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/js/modules/*.js&quot;</span>,[<span class="string">&quot;jsmin-module&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;./src/img/*&quot;</span>, [<span class="string">&quot;images&quot;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">&quot;build&quot;</span>,[<span class="string">&#x27;htmlmin&#x27;</span>,<span class="string">&#x27;cssmin&#x27;</span>,<span class="string">&#x27;jsmin&#x27;</span>,<span class="string">&#x27;jsmin-module&#x27;</span>,<span class="string">&#x27;images&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&quot;watch&quot;</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习笔记</category>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>学习笔记</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>记录博客建站过程</title>
    <url>/2020/12/27/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/</url>
    <content><![CDATA[<blockquote>
<p>很早就有建一个博客的想法，主要想记录一些学习过程、发布和分享一些文章什么的。2020年中开始花了大概两个半月学了前端，就尝试写一个博客，但是很麻烦，过程也相当曲折，写了大概三分之一还是发现自己的技术很差很差，后端也只是浅尝辄止，很多东西都无法实现，就停止了建博客。断了几个月的前端学习后，这几天突然看到收藏夹的Hexo博客教学视频，心血来潮就学着花了一天建立了一个博客。这里简单记录下建站过程和一些踩坑。</p>
</blockquote>
<h2 id="教程及主题"><a href="#教程及主题" class="headerlink" title="教程及主题"></a>教程及主题</h2><p>教程视频：<a href="https://www.bilibili.com/video/BV1Np4y1Y7SW">从零开始搭建个人博客 | 手把手教你使用Hexo框架4步完成个人博客搭建 </a></p>
<p>使用主题：<a href="https://shen-yu.gitee.io/">Ayer</a>  |  <a href="https://github.com/Shen-Yu/hexo-theme-ayer">Github地址</a>  |  <a href="https://shen-yu.gitee.io/2019/ayer/">ayer中文说明</a></p>
<p>Hexo文档：<a href="https://hexo.io/zh-cn/docs/">hexo中文文档</a></p>
<p><img src="https://pic.downk.cc/item/5fe9de223ffa7d37b33ed34f.jpg"></p>
<a id="more"></a>

<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong><em>注意，本篇文章仅作记录建站过程和解决一些问题的方法，如果你使用该主题也出现了些问题，可以略作参考。或者你是新手并且也想使用该主题，可以阅读本文。</em></strong></p>
<h2 id="过程及踩坑"><a href="#过程及踩坑" class="headerlink" title="过程及踩坑"></a>过程及踩坑</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Hexo的教学其实已经屡见不鲜了，但是我个人还是比较喜欢视频教学，找学习视频自然上B站。主要过程按照教学视频来就好。其实最主要修改的还是根目录和主题文件夹下的<font color="red"> _config.yml</font>文件，根目录下的<font color="red"> _config.yml</font>文件可以按照hexo的中文文档进行修改，主题文件夹中的最好参考该主题的中文说明（该主题的中文说明还是很简单易懂的）。最好还是阅读下hexo的中文文档，主题的中文说明更是必看。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果想更改本主题的配置，可以参考这篇文章：<a href="https://blog.csdn.net/qq_35982918/article/details/106728754">Hexo博客Ayer主题自定义配置</a></p>
<h3 id="页面404？"><a href="#页面404？" class="headerlink" title="页面404？"></a>页面404？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;最开始更换完ayer主题后，只有主页和归档能够显示，其他页面会报404，是因为这些页面都没有创建或者路径不正确。需要使用命令</p>
<p>​    <code>hexo new page 要创建的页面</code></p>
<p>注意命令应当是在根目录下运行，例如要创建分类页面，应当使用</p>
<p>​    <code>hexo new page categories</code></p>
<p>如果要标签页面就将页面名改为  tags：</p>
<p>​    <code>hexo new page tags</code></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果觉得侧边栏菜单页面过多，直接更改主题文件夹下的<font color="red">_config.yml</font>文件，直接在  <strong>#menu</strong>  选项下删除即可，侧边栏就不会显示。如果要添加菜单项，同样直接按模板格式添加就行，路径可以是相对地址路径，也可以是url地址。其实这里可以注意下， <strong>#menu</strong> 选项下的“链接”其实是和根目录  <font color="blue">/source</font> 文件夹下的页面名是一一对应的。例如：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这是主题文件夹下的<font color="red">_config.yml</font>文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">摄影:</span> <span class="string">/photos</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这是根目录<font color="blue"> /source</font> 文件夹下的文件：</p>
<p><img src="https://pic.downk.cc/item/5fe9ccd73ffa7d37b322cd6d.png" alt="演示图片"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不难看出除了 <font color="blue">/_posts</font> 文件夹是用来保存文章的，其他的文件夹名和上面是相互对应的。<em>注意路径名不要出错。</em></p>
<h3 id="分类和标签页面"><a href="#分类和标签页面" class="headerlink" title="分类和标签页面"></a>分类和标签页面</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;百度了怎么添加分类和标签页面，可以参考：<a href="https://blog.csdn.net/weixin_33857230/article/details/91474562">Hexo 添加分类及标签</a>。一开始给markdown文章添加了tags和categories，在文章界面上确实显示了标签和分类，但是分类和标签页面却仍然是空白，苦恼了半天，最后终于可找到了解决办法：<a href="https://blog.csdn.net/weixin_42118981/article/details/109462491">解决hexo下分类和标签无法显示的问题</a>，将 <font color="blue">/tags</font>  和<font color="blue">  /categories </font>文件夹下的index.md文件改成如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-28 10:17:01</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">categories</span>   <span class="comment">#这里是解决问题的核心</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>   <span class="comment"># 这里是关闭评论</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-28 10:17:49</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">tags</span>   <span class="comment">#同上，必须加上此语句</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果友链等页面也出现该问题，解决办法一致。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;写文章使用markdown的文法还是很舒服的，如果不会可以参考一下教程，十几分钟就能学会：<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程 | Markdown 教程</a>。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;插入图片有点麻烦，有一篇参考文章说的比较全：<a href="https://www.5yun.org/20794.html">Hexo文章插入图片</a>。尝试了之后还是选择了使用图床：<a href="https://www.superbed.cn/">聚合图床</a>。图片上传后可以获得一个URL地址，插入图片时直接写上链接就好。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我的博客里用了一个网易云音乐的插件，是该主题中自带的，在主题文件夹下的<font color="red"> _config.yml  </font>里可以找到，将autoplay改为true即可，也可以更改默认音乐。这个插件局限性有点大，可以参考原开发者的博客，有播放器插件的页面。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;该主题已经集成了一些插件，比如字数统计，访问量统计，评论插件等。如果想要使用其他的插件，请参考hexo插件文档。</p>
<h3 id="Github部署"><a href="#Github部署" class="headerlink" title="Github部署"></a>Github部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;部署视频中已经有说明，如果想要上传更新记住以下命令：</p>
<p><code>hexo clean</code>     主要用来清除缓存等，建议每次有更新都使用该命令</p>
<p><code>hexo g</code>    </p>
<p><code>hexo s</code>    仅在本地开启一个预览，可以直观的看到变化</p>
<p><code>hexo d</code>    上传更新</p>
<h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在观看GitHub上传后的文件后，根目录文件大致是这样：</p>
<p><img src="https://pic.downk.cc/item/5fe9f5f83ffa7d37b36711ce.png"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;再看到本地目录下的public文件夹中的文件，大致是这样的：</p>
<p><img src="https://pic.downk.cc/item/5fe9f67e3ffa7d37b3681943.png"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;并且about、archives、friends文件夹里都有一个index.html文件。再加上上面主题目录下 _config.yml 文件中 <strong>#menu</strong> 项下的“链接”，这才发现部署到github仓库根目录上的其实就是public文件夹中的所有文件，根目录的index.html作为主页面，菜单栏的链接直接指向其他页面的文件夹路径，因此里面的index.html文件自然就成为了相应页面。<em>这也就意味着如果想要自定义页面，可以直接修改public文件夹中的html文件。</em></p>
<h3 id="Valine评论系统"><a href="#Valine评论系统" class="headerlink" title="Valine评论系统"></a>Valine评论系统</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;该主题使用的评论系统是valine，当然还有其他的，在配置文件里可以看到，valine是默认开启的，页面里也可以看到，但是这时候的评论系统只有页面样式，无法发表评论。根据这篇文章：<a href="https://blog.csdn.net/blue_zy/article/details/79071414">为你的Hexo加上评论系统-Valine</a>，可以实现完整的评论功能。设置完之后别忘记重新部署。至于想管理评论的话，可以直接在  你创建的应用/存储/结构化数据/comment  中直接管理，当然也有其他方法，参考Valine官方文档：<a href="https://valine.js.org/">Valine - 一款快速、简洁且高效的无后端评论系统</a>。</p>
<h2 id="感谢原开发者"><a href="#感谢原开发者" class="headerlink" title="感谢原开发者"></a>感谢原开发者</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;大概就是这些，hexo创建博客还是很简单的，功能也相当强大，而且零成本，花点时间就可以做出来。最后感谢该主题的开发者：Shen-Yu。这是他的博客：<a href="https://shen-yu.gitee.io/">https://shen-yu.gitee.io/</a>，这是他的Github：<a href="https://github.com/Shen-Yu">https://github.com/Shen-Yu</a>。如果你也想使用该主题别忘了给开发者一个star。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果有问题可以在评论区留言。谢谢观看。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>几首散诗</title>
    <url>/2020/12/30/%E6%95%A3%E8%AF%97/</url>
    <content><![CDATA[<blockquote>
<p>收集了几首曾经写过的诗歌，诗倒是写过不少，这几首算我比较满意和喜欢的吧。至于以后会不会写诗，只能说，无心插柳。</p>
</blockquote>
<h5 id="“诗歌还是少年的诗歌，只是不再炙热。而少年也终究不再是那个少年了。”"><a href="#“诗歌还是少年的诗歌，只是不再炙热。而少年也终究不再是那个少年了。”" class="headerlink" title="“诗歌还是少年的诗歌，只是不再炙热。而少年也终究不再是那个少年了。”"></a>“诗歌还是少年的诗歌，只是不再炙热。而少年也终究不再是那个少年了。”</h5><h5 id="“待你流离半世铅华洗净，望你嬉笑怒骂不恋市井”"><a href="#“待你流离半世铅华洗净，望你嬉笑怒骂不恋市井”" class="headerlink" title="“待你流离半世铅华洗净，望你嬉笑怒骂不恋市井”"></a>“待你流离半世铅华洗净，望你嬉笑怒骂不恋市井”</h5><img src="https://pic.downk.cc/item/5fec823e3ffa7d37b3de1094.jpg" style="zoom:80%;">

<br>

<a id="more"></a>

<h3 id="《不变的守侯》"><a href="#《不变的守侯》" class="headerlink" title="《不变的守侯》"></a>《不变的守侯》</h3><p>风将叶捻成无形的华</p>
<p>湖中半心石上的我</p>
<p>形单影只</p>
<p>如金钿坚定的心</p>
<p>独自守候</p>
<p>心海中</p>
<p>泛起期待的微波</p>
<br>

<p>我愿燃烧我的灵魂</p>
<p>照亮你的前路</p>
<p>我愿永远守候你</p>
<p>直至——</p>
<p>感动天使</p>
<p>用双翼抚慰我冰冷的身躯</p>
 <br>

<p>这不是生离死别的依恋</p>
<p>也不是惊天动地的爱歌</p>
<p>只是我不变的平凡守候</p>
<p>冀盼与你的相聚</p>
<p><strong>PS：这是我人生写的第一首完整的诗歌。记得不错的话那时候应该还是14岁，那是我第一次喜欢上了诗歌，找我当时的语文老师要了一个题目，她在一些诗歌平台发布过一些诗，拿过一些比赛的名次，也算小有名气吧。因为喜欢文学和诗歌的原因，和她关系也不错。后来写了不少诗，与仿冰心体的微诗加起来前后有小百首吧。初中那三年，是真的爱文学和诗歌。我的作家和诗人梦想也是那时坚定的。只是，时间真的能改变很多。</strong></p>
<br>

<h3 id="《夜雨下》"><a href="#《夜雨下》" class="headerlink" title="《夜雨下》"></a>《夜雨下》</h3><p>莫不是窗外红雾氤氲</p>
<p>  &nbsp;&nbsp;投映进了诗人无心的空白</p>
<p>落在窗棂上，落在灰暗的眼眸里</p>
<p>此刻的她更像个伤者</p>
<p>无光的瞳孔深处泛起浅红</p>
<p> &nbsp; &nbsp;泪滴滚落烫熨脸颊</p>
<p>心此刻同雨一般冰冷</p>
  <br>

<p>窗外则是一番喧嚣，路人</p>
<p>匆匆，伞翼推开了急雨的幕帘</p>
<p>此刻竟是寻不得一人止步</p>
<p> &nbsp; &nbsp;踏上征程的热情被浇熄</p>
<p>两旁不远处又是黑夜赋予的寂静：</p>
<p>稀朗或繁密的枯树丛木深邃如魅影</p>
<p>  &nbsp;&nbsp;无形中有着摄人心魄的力量</p>
  <br>

<p>流浪的诗人也好，归程的路人也罢</p>
<p> &nbsp; &nbsp;雨中疾步的征人：愿——</p>
<p>你脚下炙热，滚烫了冰意的黑</p>
<p><strong>PS：还记得这首诗歌是高二时候写的，发布在了我们学校的校刊上，名字还记得叫《樟苑》。</strong></p>
<p><strong>后来市里作家协会的几个人和媒体，还有一些外校的，来了我们学校，为了一个“诗歌进校园”的活动，找到了当时将诗歌发布在校刊上的三个人，其中一个就是我。那天当着一大堂的人，读了这首诗，和那几个人合了照，送了个本子给我当作纪念。明明那些人的职业和位置是我曾经的梦想，但是不知道为什么，得到他们的夸奖和他们近距离接触的时候，却没有想象中的那么喜悦。</strong></p>
<p><strong>或许诗歌还是少年的诗歌，只是不再炙热，而少年也终究不再是那个少年了。</strong></p>
 <br>

<h3 id="《雨祭》"><a href="#《雨祭》" class="headerlink" title="《雨祭》"></a>《雨祭》</h3><p>是否还有谁依然留恋</p>
<p>一场风将所有热度都带走</p>
<p>迎来的是雨憔悴的温柔</p>
  <br>

<p>琴弦上幻望如何收敛</p>
<p>静默抖出的音符微微颤抖</p>
<p>秋雨也不能将泪声重奏</p>
  <br>

<p>诗人拉下思想的帷帘</p>
<p>清樽在手且敬苦痛一杯酒</p>
<p>此刻便无人为风雨等候</p>
<p>​                   ——2017.9.29作</p>
 <br>

<h3 id="《打马过桥》"><a href="#《打马过桥》" class="headerlink" title="《打马过桥》"></a>《打马过桥》</h3><p>雨打湿手中纸页 </p>
<p>水溅墨莲滴滴 </p>
<p>我把雨写进诗里 </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;烟雨渗透苍白 </p>
 <br>

<p>我打马过桥来 </p>
 <br>

<p>眼前景是雾中景 </p>
<p>身后影是路人影 </p>
<p>脚下河，沉溺 </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;多少残破回忆 </p>
<p>多少人行远离 </p>
<p>独我仍留原地 </p>
<p>诗书页页翻篇 </p>
<p>聚散分合，形莽流沙 </p>
<p>谁还识得当初少年 </p>
 <br>

<p>随遇既安之 </p>
<p>我踩水过河去</p>
<p>​             ——2018.11.25随笔</p>
 <br>

<h3 id="《无题》"><a href="#《无题》" class="headerlink" title="《无题》"></a>《无题》</h3><p>我曾 </p>
<p>伫立于青峰之巅 </p>
<p>远眺群星孤月可望不即 </p>
<p>肉眼所触是熄灭万年的余辉 </p>
<p>也曾 </p>
<p>屈坐在石阶之上 </p>
<p>静看一花一叶落地成诗 </p>
<p>木笔刻记是转瞬即逝的残句 </p>
 <br>

<p>银河流转千百亿回 </p>
<p>昙花开落一夕之间 </p>
<p>时间的刻度谁都给不了标尺 </p>
<p>无力感在所难免 </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;但时光络绎不绝 </p>
 <br>

<p>我们凭依着星星的记忆存活 </p>
<p>而在没有星星的今夜 </p>
<p>我枕边即是星海浩瀚 </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;足以藏你入梦安眠 </p>
<p>​              ——19.2.4凌晨夜笔</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>诗歌</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>关于更新到GitHub后博客内容未变问题</title>
    <url>/2020/12/29/%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>网站修改和更新文章后，在本地用 <code>hexo s</code> 部署到了GitHub后却发现自己的博客网站内容没有变化。找了一中午终于找到了原因所在。</p>
</blockquote>
<p>最开始更新完毕确认检查后，使用 <code>hexo d</code> 已经部署到了github，自己在github上也看到确实已经更新到了仓库，但是博客内容却一直没变。百度了下说是会有一段时间的延迟。但是等了一个晚上发现内容还是没有更新。于是又看了下GitHub的仓库，在右侧边栏发现了这个东西：</p>
<p><img src="https://pic.downk.cc/item/5feac4543ffa7d37b3180d86.png" alt="Environments/githubpages"></p>
<p>都知道github-pages是GitHub自带生成静态页面的功能，点进去后发现有一个更新日志，看了下最近的更新还是最开始部署到GitHub作测试的时候。于是知道博客内容没变是因为根本还没有更新。</p>
<p>然后查到了可能是分支问题，按照视频做的时候，根目录的<font color="red"> _config.yml </font>文件中deploy这一行是这样的：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:W-alker/W-alker.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>这样做，意思是将hexo部署到了master分支，导致我的仓库里多出了一个master分支。这才想起前段时间GitHub已经将仓库的默认主分支改为了main，所以我的仓库里有两个分支，一个main一个master，而main才是”active“分支，尽管我之前已经将默认分支改为了master分支，但是博客页面所在的分支还是main分支。两个分支的内容截然不同，修改之后的hexo文件更新在了master分支，而main分支保留的仍然是最开始未修改的文件。<em>也就是说，pages服务使用的是我的main分支生成的页面，而我需要生成页面的代码是在master分支里的。</em></p>
<p>于是一不做二不休，直接删除了这个仓库然后新建了同名的仓库，并且将配置文件里的branch改成了main，然后 <code>hexo clean</code> <code>hexo g</code> <code>hexo d</code> 重新部署，之后博客果然更新了。</p>
<p>后来觉得部署在GitHub上太慢，又百度着把博客部署在了gitee，但是又出现了很多问题，因为gitee的默认分支名还是maser，所以和pages服务冲突的问题又出现了好几次。最后干脆把GitHub的默认分支名改成了master，解决问题。</p>
<p><strong><em>总结：注意仓库分支。仓库最好是单分支，如果需要改到其他分支，记得将pages服务改到那个分支下。当然，你也可以直接将github的默认分支名重新改为maser，这样能避免你同时部署到其他代码托管平台如gitee和coding时候又出现问题。</em></strong></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript数据结构与算法（1）</title>
    <url>/2021/01/09/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>注意：原教学视频：<a href="https://www.bilibili.com/video/BV1a5411t7vZ">JavaScript(ES6)数据结构和算法</a>  |  <a href="https://www.bilibili.com/video/BV1r7411n7Pw">JavaScript数据结构与算法</a> (都是CoderWhy老师的教学)</p>
<p>原作者（笔记）链接：<a href="https://github.com/XPoet/JS-Data-Structures-and-Algorithms">JavaScript 数据结构与算法</a>  |  <a href="https://www.cnblogs.com/AhuntSun-blog/p/12636718.html">JavaScript数据结构与算法博客目录</a></p>
<p>PS：本文仅在学习过程中，对两篇笔记进行整合及总结（包含少量补充），以作学习之用。侵权立删。</p>
<p>Part1: 数组、栈、队列、优先队列、单向链表、双向链表。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>

<h3 id="1-什么是数据结构？"><a href="#1-什么是数据结构？" class="headerlink" title="1. 什么是数据结构？"></a>1. 什么是数据结构？</h3><p>数据结构就是在计算机中，存储和组织数据的方式。</p>
<p>解决问题方法的效率，根据数据的组织方式有关。我们无需关心数据结构到底是什么，我们需要考虑的问题是：<strong>以什么样的方式，来存储和组织我们的数据才能在使用数据时更加方便呢？</strong>这才是学习数据结构的意义。</p>
<p><strong>常见的数据结构：</strong></p>
<ul>
<li><strong>数组</strong>（Aarray）</li>
<li><strong>栈</strong>（Stack）</li>
<li><strong>链表</strong>（Linked List）</li>
<li><strong>图</strong>（Graph）</li>
<li><strong>散列表</strong>（Hash）</li>
<li><strong>队列</strong>（Queue）</li>
<li><strong>树</strong>（Tree）</li>
<li><strong>堆</strong>（Heap）</li>
</ul>
<blockquote>
<p> 注意：数据结构与算法与语言无关，常见的编程语言都有<strong>直接或间接</strong>的使用上述常见的数据结构。</p>
</blockquote>
<h3 id="2-什么是算法？"><a href="#2-什么是算法？" class="headerlink" title="2. 什么是算法？"></a>2. 什么是算法？</h3><p><strong>算法（Algorithm）的定义：</strong></p>
<ul>
<li>一个有限指令集，每条指令的描述不依赖于语言。</li>
<li>接收一些输入（有些情况下不需要输入）。</li>
<li>产生输出。</li>
<li>一定在有限步骤之后终止。</li>
</ul>
<blockquote>
<p>通俗理解：解决问题的办法/步骤逻辑。数据结构的实现，离不开算法。</p>
</blockquote>
<br>

<a id="more"></a>

<h2 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h2><hr>

<blockquote>
<p>普通语言的数组封装（如Java的ArrayList）：</p>
<ul>
<li>常见语言的数组<strong>不能存放不同的数据类型</strong>，因此所有在封装时通常存放在数组中的是Object类型</li>
<li>常见语言的数组容量不会自动改变（需要进行扩容操作）。一般需要创建一个新数组放入以前的数组数据再放入其他内容</li>
<li>常见语言的数组进行中间插入和删除操作性能比较低</li>
</ul>
</blockquote>
<p> 几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。 数组通常情况下用于存储一系列同一种数据类型的值。 但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。</p>
<h3 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h3><ul>
<li><p>new Array() </p>
<p><code>const daysOfWeek = new Array(&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;,&#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;);</code></p>
</li>
</ul>
<ul>
<li><p>[ ]</p>
<p><code>const daysOfWeek = [&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;];</code></p>
</li>
</ul>
<h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul>
<li><p>添加一个元素到数组的最后位置 <code>array.push(item)</code></p>
</li>
<li><p>在数组首位插入一个元素 <code>array.unshift(item)</code></p>
</li>
<li><p>在指定索引位置插入元素</p>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(index.js, <span class="number">0</span>, item)</span><br></pre></td></tr></table></figure>


<p>  splice() 第二个参数为 0 时，表示插入数据。</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul>
<li><p>删除数组最后的元素 <code>array.pop(item)</code></p>
</li>
<li><p>删除数组首位的元素 <code>array.shift(item)</code></p>
</li>
<li><p>删除指定索引位置的元素</p>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(start, number)</span><br></pre></td></tr></table></figure>
<p>  例如：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><ul>
<li>修改指定索引位置的元素</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(index.js, <span class="number">1</span>, item)</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray2.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改指定索引位置的几个元素</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(index.js, number, item)</span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray2.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, 2, &quot;AA&quot;, &quot;BB&quot;, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><hr>

<blockquote>
<p>数组也是一种<strong>线性结构</strong>，并且可以在任意位置插入和删除数据；</p>
<p>但是有时候，我们为了实现某些功能，必须对这种任意性加以限制；</p>
<p>而栈和队列就是比较常见的<strong>受限的线性结构</strong>。</p>
</blockquote>
<p>**栈结构示意图 **</p>
<p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/1.png" alt="栈结构示意图"></p>
<h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><p>栈（stack），是一种受限的线性表。栈的特点为后进先出（LIFO）。</p>
<ul>
<li>其限制是仅允许在<strong>表的一端</strong>进行插入和删除运算。这一端被称为栈顶，相对的。另一端称为栈底。</li>
<li>LIFO（last in first out）表示后进入的元素，先弹出栈空间。</li>
<li>向一个栈插入新元素又称作<strong>进栈、入栈或压栈</strong>，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素。</li>
<li>从一个栈删除元素又称作<strong>出栈或退栈</strong>，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li>
</ul>
<h3 id="程序中的栈结构"><a href="#程序中的栈结构" class="headerlink" title="程序中的栈结构"></a>程序中的栈结构</h3><ul>
<li>函数调用栈：A(B(C(D())))： 即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</li>
<li>递归： 为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数 A 压入栈，最后造成<strong>栈溢出</strong>（Queue Overfloat）。</li>
</ul>
<h3 id="栈结构面试题"><a href="#栈结构面试题" class="headerlink" title="栈结构面试题"></a>栈结构面试题</h3><blockquote>
<p>有六个元素6，5，4，3，2，1的顺序进栈，问下列哪一个不是合法的出栈序列？</p>
<p>A： 5 4 3 6 1 2       B：4 5 3 2 1 6        <strong>C</strong>：3 4 6 5 1 2         D：2 3 4 1 5 6 </p>
<p>（注意：题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1）</p>
<p>解析：</p>
<ul>
<li>A答案：65进栈，5出栈，4进栈出栈，3进栈出栈，6出栈，21进栈，1出栈，2出栈（整体入栈顺序符合654321）;</li>
<li>B答案：654进栈，4出栈，5出栈，3进栈出栈，2进栈出栈，1进栈出栈，6出栈（整体的入栈顺序符合654321）;</li>
<li>C答案：6543进栈，3出栈，4出栈，之后应该5出栈而不是6，所以错误；</li>
<li>D答案：65432进栈，2出栈，3出栈，4出栈，1进栈出栈，5出栈，6出栈。符合入栈顺序；</li>
</ul>
</blockquote>
<h3 id="栈常见的操作"><a href="#栈常见的操作" class="headerlink" title="栈常见的操作"></a>栈常见的操作</h3><ul>
<li><code>push(element)</code>：添加一个新元素到栈顶位置</li>
<li><code>pop()</code>：移除栈顶的元素，同时返回被移除的元素</li>
<li><code>peek()</code>：返回栈顶的元素，但不对栈做任何修改</li>
<li><code>isEmpty()</code>：若栈中没有任何元素就返回true，否则返回false</li>
<li><code>size()</code>：返回栈里元素的个数。与数组的length属性类似</li>
<li><code>toString()</code>：将栈结构的内容以字符形式返回</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现栈结构有两种比较常见的方式：基于数组和基于链表。（Js中没有自带链表）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装栈类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//栈中的属性，这里其实是给函数添加了一个items属性，因为函数也是对象</span></span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">    <span class="comment">//栈的相关操作</span></span><br><span class="line">    <span class="comment">//1.压栈</span></span><br><span class="line">    <span class="comment">//方式一(不推荐)：给对象添加方法，其他对象不能复用</span></span><br><span class="line">    <span class="comment">// this.push = () =&gt; &#123; &#125;</span></span><br><span class="line">    <span class="comment">//方式二(推荐)：给Stack类添加方法，能够多对象复用</span></span><br><span class="line">    Stack.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;     </span><br><span class="line">        <span class="built_in">this</span>.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.栈中取出元素</span></span><br><span class="line">    Stack.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.查看栈顶元素</span></span><br><span class="line">    Stack.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.判断栈是否为空</span></span><br><span class="line">    Stack.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.获取栈中元素的个数</span></span><br><span class="line">    Stack.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.toString()方法</span></span><br><span class="line">    Stack.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> resultString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">            resultString += <span class="built_in">this</span>.items[i] + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简单应用：十进制转二进制"><a href="#简单应用：十进制转二进制" class="headerlink" title="简单应用：十进制转二进制"></a>简单应用：十进制转二进制</h3><p>封装源码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">decNumber</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义栈对象</span></span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//1.获取余数，并放入栈中</span></span><br><span class="line">        stack.push(decNumber % <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.获取整除后的结果</span></span><br><span class="line">        decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>);    <span class="comment">//Math.floor()：向下取整</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.从栈中取出0和1</span></span><br><span class="line">    <span class="keyword">var</span> binaryString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        binaryString += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h2><hr>

<blockquote>
<p>队列（Queue），它是一种受限的线性表，<strong>先进先出（FIFO）</strong>。</p>
<p>受限之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。</p>
</blockquote>
<p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/1.png" alt="栈结构示意图"></p>
<h3 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h3><p>队列的实现和栈一样，可以基于数组和链表实现。</p>
<h3 id="队列的常见操作"><a href="#队列的常见操作" class="headerlink" title="队列的常见操作"></a>队列的常见操作</h3><ul>
<li><code>enqueue(element)</code>：向队列尾部添加一个（或多个）新的项</li>
<li><code>dequeue()</code>：移除队列的第一（即排在队列最前面的）项，并返回被移除的元素</li>
<li><code>front()</code>：移除队列中的第一个元素——最先被添加，也将是最先被移除的元素队列不做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）</li>
<li><code>isEmpty()</code>：如果队列中不包含任何元素，返回true，否则返回false</li>
<li><code>size()</code>：返回队列包含的元素个数，与数组的length属性类似</li>
<li><code>toString()</code>：将队列中的内容，转成字符串形式</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于数组封装队列类</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 属性</span></span><br><span class="line">     <span class="built_in">this</span>.items = [];</span><br><span class="line">     </span><br><span class="line">   <span class="comment">// 方法</span></span><br><span class="line">   <span class="comment">// 1.enqueue():将元素加入到队列中</span></span><br><span class="line">   Queue.prototype.enqueue = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.items.push(element)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 2.dequeue():从队列中删除前端元素</span></span><br><span class="line">   Queue.prototype.dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 3.front():查看前端的元素</span></span><br><span class="line">   Queue.prototype.front = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 4.isEmpty:查看队列是否为空</span></span><br><span class="line">   Queue.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 5.size():查看队列中元素的个数</span></span><br><span class="line">   Queue.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 6.toString():将队列中元素以字符串形式输出</span></span><br><span class="line">   Queue.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.items)&#123;</span><br><span class="line">         resultString += i + <span class="string">&#x27; &#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> resultString</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列应用：击鼓传花"><a href="#队列应用：击鼓传花" class="headerlink" title="队列应用：击鼓传花"></a>队列应用：击鼓传花</h3><p>使用队列实现小游戏：击鼓传花。</p>
<p>分析：传入一组数据和设定的数字num，循环遍历数组内元素，遍历到的元素为指定数字num时将该元素删除，直至数组剩下一个元素。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 队列应用：面试题：击鼓传花</span></span><br><span class="line"><span class="keyword">let</span> passGame = <span class="function">(<span class="params">nameList, num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.创建队列结构</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.将所有人依次加入队列</span></span><br><span class="line">  <span class="comment">// 这是ES6的for循环写法，i相当于nameList[i]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> nameList)&#123;</span><br><span class="line">    queue.enqueue(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.开始数数</span></span><br><span class="line"> <span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>)&#123;<span class="comment">//队列中只剩1个人就停止数数</span></span><br><span class="line">  <span class="comment">// 不是num的时候，重新加入队列末尾</span></span><br><span class="line">  <span class="comment">// 是num的时候，将其从队列中删除</span></span><br><span class="line">  <span class="comment">// 3.1.num数字之前的人重新放入队列的末尾(把队列前面删除的加到队列最后)</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; num-<span class="number">1</span>; i++ )&#123;</span><br><span class="line">    queue.enqueue(queue.dequeue())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.2.num对应这个人，直接从队列中删除</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路是这样的，由于队列没有像数组一样的下标值不能直接取到某一元素，所以采用，把num前面的num-1个元素先删除后添加到队列末尾，这样第num个元素就排到了队列的最前面，可以直接使用dequeue方法进行删除</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  queue.dequeue()</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4.获取剩下的那个人</span></span><br><span class="line">  <span class="built_in">console</span>.log(queue.size());							</span><br><span class="line">  <span class="keyword">let</span> endName = queue.front()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;最终剩下的人：&#x27;</span> + endName);						 </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.测试击鼓传花</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lilei&#x27;</span>, <span class="string">&#x27;Tony&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(passGame(names, <span class="number">3</span>));								</span><br></pre></td></tr></table></figure>
<br>

<h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><hr>

<h3 id="优先级队列的特点"><a href="#优先级队列的特点" class="headerlink" title="优先级队列的特点"></a>优先级队列的特点</h3><ul>
<li>普通的队列插入一个元素，数据会被放在<strong>后端</strong>，并且需要前面所有的元素都处理完成后才会处理前面的数据。</li>
<li>但是优先级队列，在插入一个元素的时候会考虑<strong>该数据的优先级</strong>。</li>
<li>和其他数据优先级<strong>进行比较</strong>。</li>
<li>比较完成后，可以得出这个元素在队列中<strong>正确的位置</strong>。</li>
<li>其他处理方式，和基本队列的处理方式一样。</li>
</ul>
<p>优先级队列<strong>主要考虑的问题</strong>：</p>
<ul>
<li>每个元素不再只是一个数据，还包含数据的优先级；</li>
<li>在添加数据过程中，根据优先级放入到正确位置；</li>
</ul>
<h3 id="优先级队列的实现"><a href="#优先级队列的实现" class="headerlink" title="优先级队列的实现"></a>优先级队列的实现</h3><p><strong>代码实现</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装优先级队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//内部类：在类里面再封装一个类;表示带优先级的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装属性</span></span><br><span class="line">  <span class="built_in">this</span>.items = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.实现按照优先级插入方法</span></span><br><span class="line">  PriorityQueue.prototype.enqueue = <span class="function">(<span class="params">element, priority</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.1.创建QueueElement对象</span></span><br><span class="line">    <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line">    <span class="comment">// 1.2.判断队列是否为空,没有其他元素可以直接插入</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.items.length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.items)&#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素与原有元素进行优先级比较(priority越小，优先级越大)</span></span><br><span class="line">        <span class="keyword">if</span>(queueElement.priority &lt; i.priority)&#123;</span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// 新元素已经找到插入位置了可以使用break停止循环</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 新元素没有成功插入，就把它放在队列的最前面</span></span><br><span class="line">      <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.dequeue():从队列中删除前端元素</span></span><br><span class="line">  PriorityQueue.prototype.dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.front():查看前端的元素</span></span><br><span class="line">  PriorityQueue.prototype.front = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.isEmpty():查看队列是否为空</span></span><br><span class="line">  PriorityQueue.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.size():查看队列中元素的个数</span></span><br><span class="line">  PriorityQueue.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6.toString():以字符串形式输出队列中的元素</span></span><br><span class="line">  PriorityQueue.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.items)&#123;</span><br><span class="line">        resultString += i.element + <span class="string">&#x27;-&#x27;</span> + i.priority + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> pq = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">pq.enqueue(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">111</span>);</span><br><span class="line">pq.enqueue(<span class="string">&#x27;Hellen&#x27;</span>,<span class="number">200</span>);</span><br><span class="line">pq.enqueue(<span class="string">&#x27;Mary&#x27;</span>,<span class="number">30</span>);</span><br><span class="line">pq.enqueue(<span class="string">&#x27;Gogo&#x27;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="comment">// 打印修改过后的优先队列对象</span></span><br><span class="line"><span class="built_in">console</span>.log(pq);</span><br></pre></td></tr></table></figure>
<h4 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先队列内部的元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列类（继承 Queue 类）</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(element, priority) 入队，将元素按优先级加入到队列中</span></span><br><span class="line">  <span class="comment">// 重写 enqueue()</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据传入的元素，创建 QueueElement 对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 如果为空，不用判断优先级，直接添加</span></span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素进行优先级比较，priority 值越小，优先级越大</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; <span class="built_in">this</span>.items[i].priority) &#123;</span><br><span class="line">          <span class="comment">// 在指定的位置插入元素</span></span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果遍历完所有元素，优先级都大于新插入的元素，就将新插入的元素插入到最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 dequeue()</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 front()</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 isEmpty()</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 size()</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中元素以字符串形式返回</span></span><br><span class="line">  <span class="comment">// 重写 toString()</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item.element + <span class="string">&#x27;-&#x27;</span> + item.priority + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">// 入队 enqueue() 测试</span></span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;A&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;B&#x27;</span>, <span class="number">15</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;C&#x27;</span>, <span class="number">11</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;D&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;E&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;A&quot;, priority: 10&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;C&quot;, priority: 11&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队 dequeue() 测试</span></span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.toString()); <span class="comment">//--&gt; B-15 E-18 D-20</span></span><br></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>数组的push方法在数组、栈和队列中的形式：</strong></p>
<ul>
<li><strong>数组</strong>：在数组[0，1，2]中，pop(3)，结果为[0，1，2，3]；</li>
<li><strong>栈</strong>：执行pop(0)，pop(1)，pop(2)，pop(3)，从栈底到栈顶的元素分别为：0，1，2，3；如果看成数组，可写为[0，1，2，3]，但是索引为3的元素3其实是栈顶元素；所以说栈的push方法是向栈顶添加元素（但在数组的视角下为向数组尾部添加元素）；</li>
<li><strong>队列</strong>：enqueue方法可以由数组的push方法实现，与数组相同，相当于在数组尾部添加元素。</li>
</ul>
<p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/6.png" alt="数组、栈和队列图解"></p>
<br>

<h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><hr>

<h3 id="认识链表"><a href="#认识链表" class="headerlink" title="认识链表"></a>认识链表</h3><h4 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h4><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的<strong>实现机制完全不同</strong>。</p>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul>
<li><p>存储多个元素，数组（或列表）可能是最常用的数据结构。</p>
</li>
<li><p>几乎每一种编程语言都有默认实现数组结构，提供了一个便利的 <code>[]</code> 语法来访问数组元素。</p>
</li>
<li><p>数组缺点：</p>
<ul>
<li><p>数组的创建需要申请一段连续的内存空间(一整块内存)，并且大小是固定的，当前数组不能满足容量需求时，需要扩容。 (一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去)</p>
</li>
<li><p>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</p>
</li>
</ul>
</li>
</ul>
<h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><ul>
<li><p>存储多个元素，另外一个选择就是使用链表。</p>
</li>
<li><p>不同于数组，链表中的元素在内存中<strong>不必是连续的空间</strong>。</p>
</li>
<li><p>链表的每个元素由一个存储<strong>元素本身的节点</strong>和一个<strong>指向下一个元素的引用</strong>(有些语言称为指针)组成。</p>
</li>
<li><p>链表优点：</p>
<ul>
<li><p>内存空间不必是连续的，可以充分利用计算机的内存，实现灵活的<strong>内存动态管理</strong>。</p>
</li>
<li><p>链表不必在创建时就确定大小，并且大小可以<strong>无限延伸下去</strong>。</p>
</li>
<li><p>链表在插入和删除数据时，时间复杂度可以达到 O(1)，相对数组效率高很多。</p>
</li>
</ul>
</li>
<li><p>链表缺点：</p>
<ul>
<li><p>访问任何一个位置的元素时，需要<strong>从头开始访问</strong>。(无法跳过第一个元素访问任何一个元素)</p>
</li>
<li><p>无法通过下标值直接访问元素，需要<strong>从头开始一个个访问</strong>，直到找到对应的元素。</p>
</li>
<li><p>虽然可以轻松地到达下一个节点，但是回到前一个节点是很难的。</p>
</li>
</ul>
</li>
</ul>
<h3 id="单向链表的定义"><a href="#单向链表的定义" class="headerlink" title="单向链表的定义"></a>单向链表的定义</h3><p>单向链表类似于火车头，一节车厢载着乘客（数据），通过节点连接另一节车厢，以此类推。</p>
<p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/2.png" alt="链表的火车结构示意图"></p>
<p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/3.png" alt="链表结构示意图"></p>
<ul>
<li>head属性指向链表的第一个节点；</li>
<li>链表中的最后一个节点指向null；</li>
<li>当链表中一个节点也没有的时候，head直接指向null；</li>
</ul>
<h3 id="链表中的常见操作"><a href="#链表中的常见操作" class="headerlink" title="链表中的常见操作"></a>链表中的常见操作</h3><ul>
<li><code>append(element)</code> 向链表尾部添加一个新的项。</li>
<li><code>insert(position, element)</code> 向链表的特定位置插入一个新的项。</li>
<li><code>getData(position)</code> 获取对应位置的元素数据。</li>
<li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回-1。</li>
<li><code>update(position, element)</code> 修改某个位置的元素。</li>
<li><code>removeAt(position)</code> 从链表的特定位置移除一项。</li>
<li><code>remove(element)</code> 从链表中移除一项。</li>
<li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 trun，如果链表长度大于 0 则返回 false。</li>
<li><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</li>
<li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</li>
</ul>
<h3 id="封装单向链表类"><a href="#封装单向链表类" class="headerlink" title="封装单向链表类"></a>封装单向链表类</h3><p>首先需要弄清楚：下文中的position指的是两个节点之间，并且与index的关系如下图所示：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/4.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/4.png"></a></p>
<p>position的值一般表示position所指位置的下一个节点。当position的值与index的值相等时，比如position = index = 1，那么它们都表示Node2。</p>
<h4 id="0-创建单向链表类"><a href="#0-创建单向链表类" class="headerlink" title="0. 创建单向链表类"></a>0. 创建单向链表类</h4><p>先创建单向链表类LinkedList，并添加基本属性，再逐步实现单向链表的常用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装单向链表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 封装一个内部类：节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="comment">// 属性head指向链表的第一个节点</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ES6使用class实现*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="1-append-element"><a href="#1-append-element" class="headerlink" title="1. append(element)"></a>1. append(element)</h4><p><strong>过程详解：</strong></p>
<ul>
<li>首先让current指向第一个节点：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/5.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/5.png" alt="image-20200227145315369"></a></p>
<ul>
<li>通过while循环使current指向最后一个节点，最后通过current.next = newNode，让最后一个节点指向新节点newNode：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/6.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/6.png" alt="image-20200227145453380"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一.实现append方法</span></span><br><span class="line">LinkedList.prototype.append = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.创建新节点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.添加新节点</span></span><br><span class="line">  <span class="comment">//情况1：只有一个节点时候</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.length == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">  <span class="comment">//情况2：节点数大于1，在链表的最后添加新节点  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;              </span><br><span class="line">    <span class="comment">//让变量current指向第一个节点</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">//当current.next(下一个节点不为空)不为空时，一直循环，直到current指向最后一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (current.next)&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后节点的next指向新的节点</span></span><br><span class="line">    current.next = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//3.添加完新结点之后length+1</span></span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ES6使用class实现，此处仅做一个示例，后面的单向链表方法实现相同，方法块中的内容和不用class实现的代码一样，便不再赘述*/</span></span><br><span class="line"><span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">    <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试append方法</span></span><br><span class="line">list.append(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list);  </span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/7.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/7.png" alt="image-20200305234828061"></a></p>
<br>

<h4 id="2-toString"><a href="#2-toString" class="headerlink" title="2. toString()"></a>2. toString()</h4><p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现toString方法</span></span><br><span class="line">LinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> listString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.循环获取一个个的节点</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123; </span><br><span class="line">    listString += current.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    current = current.next;<span class="comment">//千万不要忘了拼接完一个节点数据之后，让current指向下一个节点</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span>  listString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建LinkList</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入数据</span></span><br><span class="line">list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">list.append(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试toString方法</span></span><br><span class="line"><span class="built_in">console</span>.log(list.toString());</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/8.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/8.png" alt="image-20200305235437934"></a></p>
<br>

<h4 id="3-insert-position-element"><a href="#3-insert-position-element" class="headerlink" title="3. insert(position,element)"></a>3. insert(position,element)</h4><p><strong>过程详解：</strong></p>
<p>insert方法实现的过程：根据插入节点位置的不同可分为多种情况：</p>
<ul>
<li><strong>情况1：position = 0</strong>：</li>
</ul>
<p>通过： <code>newNode.next = this.head</code>，建立连接1；</p>
<p>通过： <code>this.head = newNode</code>，建立连接2；（不能先建立连接2，否则this.head不再指向Node1）</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/9.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/9.png" alt="image-20200306103312580"></a></p>
<ul>
<li><strong>情况2：position &gt; 0</strong>：</li>
</ul>
<p>首先定义两个变量previous和curent分别指向需要插入位置pos = X的前一个节点和后一个节点；</p>
<p>然后，通过：<code>newNode.next = current</code>，改变指向3；</p>
<p>最后，通过：<code>previous.next = newNode</code>，改变指向4；</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/10.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/10.png" alt="image-20200306103541674"></a></p>
<ul>
<li><strong>情况2的特殊情形：position = length</strong>：</li>
</ul>
<p>情况2也包含了pos = length的情况，该情况下current和newNode.next都指向null；建立连接3和连接4的方式与情况2相同。</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/11.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/11.png" alt="image-20200306103646576"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现insert方法</span></span><br><span class="line">LinkedList.prototype.insert = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//理解positon的含义：position=0表示新界点插入后要成为第1个节点，position=2表示新界点插入后要成为第3个节点</span></span><br><span class="line">  <span class="comment">//1.对position进行越界判断:要求传入的position不能是负数且不能超过LinkedList的length</span></span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.根据data创建newNode</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.插入新节点</span></span><br><span class="line">  <span class="comment">//情况1：插入位置position=0</span></span><br><span class="line">  <span class="keyword">if</span>(position == <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="comment">// 让新节点指向第一个节点</span></span><br><span class="line">    newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">// 让head指向新节点</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">  <span class="comment">//情况2：插入位置position&gt;0(该情况包含position=length)</span></span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">//步骤1：通过while循环使变量current指向position位置的后一个节点(注意while循环的写法)</span></span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    <span class="comment">//步骤2：在current指向下一个节点之前，让previous指向current当前指向的节点 </span></span><br><span class="line">      previous = current;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 步骤3：通过变量current(此时current已经指向position位置的后一个节点)，使newNode指向position位置的后一个节点</span></span><br><span class="line">    newNode.next = current;</span><br><span class="line">    <span class="comment">//步骤4：通过变量previous，使position位置的前一个节点指向newNode</span></span><br><span class="line">    previous.next = newNode;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      启示：</span></span><br><span class="line"><span class="comment">      1.我们无法直接操作链表中的节点，但是可以通过变量指向这些节点，以此间接地操作节点(替身使者)；</span></span><br><span class="line"><span class="comment">      比如current指向节点3，想要节点3指向节点4只需要：current.next = 4即可。</span></span><br><span class="line"><span class="comment">      2.两个节点间是双向的，想要节点2的前一个节点为节点1，可以通过：1.next=2，来实现；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.新节点插入后要length+1</span></span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="4-getData-position"><a href="#4-getData-position" class="headerlink" title="4. getData(position)"></a>4. getData(position)</h4><p><strong>过程详解：</strong></p>
<p>getData方法的实现过程：以获取position = 2为例，如下图所示：</p>
<ul>
<li>首先使current指向第一个节点，此时index=0；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/14.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/14.png" alt="image-20200227164308939"></a></p>
<ul>
<li>通过while循环使current循环指向下一个节点，注意循环终止的条件index++ &lt; position，即当index=position时停止循环，此时循环了1次，current指向第二个节点(Node2)，最后通过current.data返回Node2节点的数据；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/15.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/15.png" alt="image-20200227164351066"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现get方法</span></span><br><span class="line">LinkedList.prototype.getData = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="comment">// 当position = length时，取到的是null所以0 =&lt; position &lt; length</span></span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.获取指定的positon位置的后一个节点的data</span></span><br><span class="line">  <span class="comment">//同样使用一个变量间接操作节点</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">   <span class="comment">//1.创建LinkedList</span></span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2.插入数据</span></span><br><span class="line">   list.append(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">   list.append(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">   list.append(<span class="string">&#x27;ccc&#x27;</span>);	</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试get方法</span></span><br><span class="line">   <span class="built_in">console</span>.log(list.get(<span class="number">0</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(list.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/16.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/16.png" alt="image-20200306000211073"></a></p>
<br>

<h4 id="5-indexOf-element"><a href="#5-indexOf-element" class="headerlink" title="5. indexOf(element)"></a>5. indexOf(element)</h4><p><strong>过程详解：</strong></p>
<p>indexOf方法的实现过程：</p>
<ul>
<li>使用变量current记录当前指向的节点，使用变量index记录当前节点的索引值（注意index = node数-1）：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/17.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/17.png" alt="image-20200227155230599"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现indexOf方法</span></span><br><span class="line">LinkedList.prototype.indexOf = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.开始查找:只要current不指向null就一直循环</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    <span class="keyword">if</span>(current.data == data)&#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.next;</span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.遍历完链表没有找到，返回-1</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">   <span class="comment">//1.创建LinkList</span></span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2.插入数据</span></span><br><span class="line">   list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">   list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">   list.append(<span class="string">&#x27;ccc&#x27;</span>)	</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//3.测试indexOf方法</span></span><br><span class="line">   <span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;ccc&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/18.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/18.png" alt="image-20200306000424189"></a></p>
<br>

<h4 id="6-update-position-element"><a href="#6-update-position-element" class="headerlink" title="6. update(position,element)"></a>6. update(position,element)</h4><p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现update方法</span></span><br><span class="line">LinkedList.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="comment">//因为被修改的节点不能为null，所以position不能等于length</span></span><br><span class="line">  <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.查找正确的节点</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.将position位置的后一个节点的data修改成newData</span></span><br><span class="line">  current.data = newData;</span><br><span class="line">  <span class="comment">//返回true表示修改成功</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">   <span class="comment">//1.创建LinkList</span></span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2.插入数据</span></span><br><span class="line">   list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">   list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">   list.append(<span class="string">&#x27;ccc&#x27;</span>)	</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//3.测试update方法</span></span><br><span class="line">   list.update(<span class="number">0</span>, <span class="string">&#x27;修改第一个节点&#x27;</span>)</span><br><span class="line">   list.update(<span class="number">1</span>, <span class="string">&#x27;修改第二个节点&#x27;</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(list);</span><br><span class="line">   <span class="built_in">console</span>.log(list.update(<span class="number">3</span>, <span class="string">&#x27;能修改么&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/19.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/19.png" alt="image-20200306000700656"></a></p>
<br>

<h4 id="7-removeAt-position"><a href="#7-removeAt-position" class="headerlink" title="7. removeAt(position)"></a>7. removeAt(position)</h4><p><strong>过程详解：</strong></p>
<p>removeAt方法的实现过程：删除节点时存在多种情况：</p>
<ul>
<li><strong>情况1：position = 0</strong>，即移除第一个节点（Node1）。</li>
</ul>
<p>通过：<code>this.head = this.head.next</code>，改变指向1即可；</p>
<p>虽然Node1的next仍指向Node2，但是没有引用指向Node1，则Node1会被垃圾回收器自动回收，所以不用处理Node1指向Node2的引用next。</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/20.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/20.png" alt="image-20200306110518877"></a></p>
<ul>
<li><strong>情况2：positon &gt; 0</strong>，比如pos = 2即移除第三个节点（Node3）。</li>
</ul>
<p><strong>注意：</strong>position = length时position后一个节点为null不能删除，因此position != length；</p>
<p>首先，定义两个变量previous和curent分别指向需要删除位置pos = x的前一个节点和后一个节点；</p>
<p>然后，通过：<code>previous.next = current.next</code>，改变指向1即可；</p>
<p>随后，没有引用指向Node3，Node3就会被自动回收，至此成功删除Node3 。</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/21.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/21.png" alt="image-20200306104624457"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现removeAt方法</span></span><br><span class="line">LinkedList.prototype.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.删除元素</span></span><br><span class="line">  <span class="comment">//情况1：position = 0时(删除第一个节点)</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">if</span> (position ==<span class="number">0</span> ) &#123;</span><br><span class="line">  <span class="comment">//情况2：position &gt; 0时</span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      previous = current;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束后，current指向position后一个节点，previous指向current前一个节点</span></span><br><span class="line">    <span class="comment">//再使前一个节点的next指向current的next即可</span></span><br><span class="line">    previous.next = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.length-1;</span></span><br><span class="line">  <span class="built_in">this</span>.length -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回被删除节点的data，为此current定义在最上面</span></span><br><span class="line">  <span class="keyword">return</span> current.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//测试代码</span></span><br><span class="line">  <span class="comment">//1.创建LinkedList</span></span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//2.插入数据</span></span><br><span class="line">  list.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">  list.append(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">  list.append(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.测试removeAt方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(list.removeAt(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(list.removeAt(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/22.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/22.png" alt="image-20200306000839608"></a></p>
<br>

<h4 id="8-其他方法"><a href="#8-其他方法" class="headerlink" title="8. 其他方法"></a>8. 其他方法</h4><p>其他方法包括：<strong>remove(element)、isEmpty()、size()</strong></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-------------其他方法的实现--------------*/</span></span><br><span class="line">      <span class="comment">//一.实现remove方法</span></span><br><span class="line">      LinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取data在列表中的位置</span></span><br><span class="line">        <span class="keyword">let</span> position = <span class="built_in">this</span>.indexOf(data);</span><br><span class="line">        <span class="comment">//2.根据位置信息，删除结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(position);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//二.实现isEmpty方法</span></span><br><span class="line">      LinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//三.实现size方法</span></span><br><span class="line">      LinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    <span class="comment">//1.创建LinkList</span></span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.插入数据</span></span><br><span class="line">    list.append(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">    list.append(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">    list.append(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------其他方法测试----------------*/</span></span><br><span class="line">  	<span class="comment">//remove方法</span></span><br><span class="line">  	<span class="built_in">console</span>.log(list.remove(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line">  	<span class="built_in">console</span>.log(list);</span><br><span class="line">  	<span class="comment">//isEmpty方法</span></span><br><span class="line">  	<span class="built_in">console</span>.log(list.isEmpty());</span><br><span class="line">  	<span class="comment">//size方法</span></span><br><span class="line">  	<span class="built_in">console</span>.log(list.size());</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/23.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/23.png" alt="image-20200306001247346"></a></p>
<br>

<h4 id="9-完整实现"><a href="#9-完整实现" class="headerlink" title="9. 完整实现"></a>9. 完整实现</h4><h5 id="1-function类实现"><a href="#1-function类实现" class="headerlink" title="1) function类实现"></a>1) function类实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//内部类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一.append方法</span></span><br><span class="line">  LinkedList.prototype.append = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.length == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;              </span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span> (current.next)&#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      current.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//二.toString方法</span></span><br><span class="line">  LinkedList.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> listString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(current)&#123; </span><br><span class="line">      listString += current.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//三.insert方法</span></span><br><span class="line">  LinkedList.prototype.insert = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">        previous = current;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      newNode.next = current;</span><br><span class="line">      previous.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四.getData方法</span></span><br><span class="line">  LinkedList.prototype.getData = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//五.indexOf方法</span></span><br><span class="line">  LinkedList.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">      <span class="keyword">if</span>(current.data == data)&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//六.update方法</span></span><br><span class="line">  LinkedList.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current.data = newData;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//七.removeAt方法</span></span><br><span class="line">  LinkedList.prototype.removeAt = <span class="function"><span class="params">position</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position ==<span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previous = current;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      previous.next = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//八.remove方法</span></span><br><span class="line">  LinkedList.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> position = <span class="built_in">this</span>.indexOf(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//九.isEmpty方法</span></span><br><span class="line">  LinkedList.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//十.size方法</span></span><br><span class="line">  LinkedList.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-class类实现"><a href="#2-class类实现" class="headerlink" title="2) class类实现"></a>2) class类实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">      <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一些变量</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">      <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 获取指定位置的 data</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 返回指定 data 的 index，如果没有，返回 -1。</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update() 修改指定位置节点的 data</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">      <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove() 删除指定 data 的节点</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><hr>

<h3 id="单向链表和双向链表"><a href="#单向链表和双向链表" class="headerlink" title="单向链表和双向链表"></a>单向链表和双向链表</h3><h4 id="单向链表-1"><a href="#单向链表-1" class="headerlink" title="单向链表"></a>单向链表</h4><ul>
<li>只能从头遍历到尾或者从尾遍历到头（一般从头到尾）。</li>
<li>链表相连的过程是单向的，实现原理是上一个节点中有指向下一个节点的引用。</li>
<li>单向链表有一个比较明显的缺点：可以轻松到达下一个节点，但回到前一个节点很难，在实际开发中, 经常会遇到需要回到上一个节点的情况。</li>
</ul>
<h4 id="双向链表-1"><a href="#双向链表-1" class="headerlink" title="双向链表"></a>双向链表</h4><ul>
<li>既可以从头遍历到尾，也可以从尾遍历到头。</li>
<li>链表相连的过程是双向的。实现原理是一个节点既有向前连接的引用，也有一个向后连接的引用。</li>
<li>双向链表可以有效的解决单向链表存在的问题。</li>
<li>双向链表缺点：<ul>
<li>每次在插入或删除某个节点时，都需要处理四个引用，而不是两个，实现起来会困难些。</li>
<li>相对于单向链表，所占内存空间更大一些。</li>
<li>但是，相对于双向链表的便利性而言，这些缺点微不足道。</li>
</ul>
</li>
</ul>
<h3 id="双向链表结构"><a href="#双向链表结构" class="headerlink" title="双向链表结构"></a>双向链表结构</h3><p><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/1.png" alt="img"></p>
<ul>
<li>双向链表不仅有 head 指针指向第一个节点，而且有 tail 指针指向最后一个节点。</li>
<li>每一个节点由三部分组成：item 储存数据、prev 指向前一个节点、next 指向后一个节点。</li>
<li>双向链表的第一个节点的 prev 指向 null。</li>
<li>双向链表的最后一个节点的 next 指向 null。</li>
</ul>
<h3 id="双向链表常见的操作"><a href="#双向链表常见的操作" class="headerlink" title="双向链表常见的操作"></a>双向链表常见的操作</h3><ul>
<li><code>append(element)</code> 向链表尾部追加一个新元素。</li>
<li><code>insert(position, element)</code> 向链表的指定位置插入一个新元素。</li>
<li><code>getElement(position)</code> 获取指定位置的元素。</li>
<li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回 -1。</li>
<li><code>update(position, element)</code> 修改指定位置上的元素。</li>
<li><code>removeAt(position)</code> 从链表中的删除指定位置的元素。</li>
<li><code>remove(element)</code> 从链表删除指定的元素。</li>
<li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 trun，如果链表长度大于 0 则返回 false。</li>
<li><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</li>
<li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</li>
<li><code>forwardString()</code> 返回正向遍历节点字符串形式。</li>
<li><code>backwordString()</code> 返回反向遍历的节点的字符串形式。</li>
</ul>
<h3 id="封装双向链表类"><a href="#封装双向链表类" class="headerlink" title="封装双向链表类"></a>封装双向链表类</h3><blockquote>
<p>注：此处仅贴出使用function实现的代码，使用class实现代码参考完整实现</p>
</blockquote>
<h4 id="0-创建双向链表类"><a href="#0-创建双向链表类" class="headerlink" title="0. 创建双向链表类"></a>0. 创建双向链表类</h4><p>先创建双向链表类DoubleLinklist，并添加基本属性，再实现双向链表的常用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装双向链表类</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">DoubleLinklist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//封装内部类：节点类</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.data = data;</span><br><span class="line">     <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">     <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//属性</span></span><br><span class="line">   <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">   <span class="built_in">this</span>.tail ==<span class="literal">null</span>;</span><br><span class="line">   <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用class类实现*/</span></span><br><span class="line"><span class="comment">// 双向链表的节点类（继承单向链表的节点类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(element);</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类继承单向链表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="1-append-element-1"><a href="#1-append-element-1" class="headerlink" title="1. append(element)"></a>1. append(element)</h4><p><strong>过程详解：</strong></p>
<p>添加节点时分为多种情况：</p>
<ul>
<li>情况1：添加的是第一个节点：只需要让head和tail都指向新节点即可；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/2.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/2.png" alt="image-20200228094847845"></a></p>
<ul>
<li><p>情况2：添加的不是第一个节点，如下图所示：只需要改变相关引用的指向即可。</p>
<ul>
<li>通过：<code>newNode.prev = this.tail</code>，  建立指向1；</li>
<li>通过：<code>this.tail.next = newNode</code>， 建立指向2；</li>
<li>通过：<code>this.tail = newNode</code>， 建立指向3</li>
</ul>
<p>要注意改变变量指向的顺序，最后修改tail指向，这样未修改前tail始终指向原链表的最后一个节点。</p>
</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/3.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/3.png" alt="image-20200228095048677"></a></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/4.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/4.png" alt="image-20200228095135301"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//append方法</span></span><br><span class="line">DoubleLinklist.prototype.append = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.根据data创建新节点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.添加节点</span></span><br><span class="line">  <span class="comment">//情况1：添加的是第一个节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode ;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//情况2：添加的不是第一个节点</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.length+1</span></span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建双向链表</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.测试append方法</span></span><br><span class="line"> list.append(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<ul>
<li>next方向：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/5.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/5.png" alt="image-20200305223911713"></a></p>
<ul>
<li>prev方向：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/6.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/6.png" alt="image-20200305224004626"></a></p>
<br>

<h4 id="2-toString-1"><a href="#2-toString-1" class="headerlink" title="2. toString()"></a>2. toString()</h4><p><strong>过程详解：</strong></p>
<p>三种获取字符串的方法：<strong>toString（）</strong>、<strong>forwardString（）</strong>、<strong>backwardString（）</strong>实现原理相似，仅以backWardString方法为例：</p>
<ul>
<li>定义current变量记录当前指向的节点。首先让current指向第一个节点，然后通过 <code>current = current.next</code> 依次向后遍历。在while循环中以(current)作为条件遍历链表，只要 <code>current != null</code> 就一直遍历，由此可获取链表所有节点的数据。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/7.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/7.png" alt="image-20200228100030713"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将链表转变为字符串形式</span></span><br><span class="line"><span class="comment">//一.toString方法</span></span><br><span class="line">DoubleLinklist.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.backwardString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二.forwardString方法</span></span><br><span class="line">DoubleLinklist.prototype.forwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current =<span class="built_in">this</span>.tail;</span><br><span class="line">  <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.依次向前遍历，获取每一个节点</span></span><br><span class="line">  <span class="keyword">while</span> (current) &#123;</span><br><span class="line">    resultString += current.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">    current = current.prev;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三.backwardString方法</span></span><br><span class="line">DoubleLinklist.prototype.backwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.依次向后遍历，获取每一个节点</span></span><br><span class="line">  <span class="keyword">while</span> (current) &#123;</span><br><span class="line">    resultString += current.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建双向链表</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试字符串方法   </span></span><br><span class="line">list.append(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list.toString());</span><br><span class="line"><span class="built_in">console</span>.log(list.forwardString());</span><br><span class="line"><span class="built_in">console</span>.log(list.backwardString());</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/8.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/8.png" alt="image-20200305225437424"></a></p>
<br>

<h4 id="3-insert-position-element-1"><a href="#3-insert-position-element-1" class="headerlink" title="3. insert(position,element)"></a>3. insert(position,element)</h4><p><strong>程详解：</strong></p>
<p>插入节点可分为多种情况：</p>
<p><strong>当原链表为空时</strong>：</p>
<ul>
<li>情况1：插入的新节点是链表的第一个节点；只需要让head和tail都指向newNode即可。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/9.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/9.png" alt="image-20200228102437899"></a></p>
<p><strong>当原链表不为空时</strong>：</p>
<ul>
<li>情况2：当position == 0，即在链表的首部添加节点：如下图所示：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/10.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/10.png" alt="image-20200228103942238"></a></p>
<p>首先，通过：<code>this.head.prev = newNode</code>，改变指向1；</p>
<p>然后，通过：<code>newNode.next = this.head</code>，改变指向2；</p>
<p>最后，通过：<code>this.head = newNode</code>，改变指向3；</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/11.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/11.png" alt="image-20200228110014565"></a></p>
<ul>
<li>情况3：<code>position == this.length</code>，即在链表的尾部添加节点，如下图所示：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/12.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/12.png" alt="image-20200228105207102"></a></p>
<p>首先，通过：<code>this.tail.next = newNode</code>，改变指向1；（注意这里使用this.tail指向原链表最后一个节点，而不是this.head。因为当length&gt;1时，this.head != this.tail。）</p>
<p>然后，通过：<code>newNode.prev = this.tail</code>，改变指向2；</p>
<p>最后，通过：<code>this.tail = newNode</code>，改变指向3；</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/13.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/13.png" alt="image-20200228110745214"></a></p>
<ul>
<li>情况4：0 &lt; position &lt; this.length，即在链表的中间插入新节点，假设在position = 1的位置插入，如下图所示：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/14.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/14.png" alt="image-20200228112941682"></a></p>
<p>首先，需要定义变量current按照之前的思路，通过while循环找到position位置的后一个节点，循环结束后index = position</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/15.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/15.png" alt="image-20200228113257650"></a></p>
<p>如下图所示：当position = 1时，current就指向了Node2。这样操作current就等同于间接地操作Node2，还可以通过current.prev间接获取Node1。得到了newNode的前一个节点和后一个节点就可以通过改变它们的prev和next变量的指向来插入newNode了。</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/16.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/16.png" alt="image-20200228120701923"></a></p>
<p>通过：<code>newNode.next = current</code>，改变指向1；</p>
<p>通过：<code>newNode.prev = current.prev</code>，改变指向2；</p>
<p>通过：<code>current.prev.next = newNode</code>，改变指向3；</p>
<blockquote>
<p>注意必须最后才修改current.prev的指向，不然就无法通过current.prev获取需要操作的Node1了。</p>
</blockquote>
<p>通过：<code>current.prev = current</code>，改变指向4；</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/17.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/17.png" alt="image-20200228124931441"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//insert方法</span></span><br><span class="line">DoubleLinklist.prototype.insert = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.根据data创建新的节点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.插入新节点</span></span><br><span class="line">  <span class="comment">//原链表为空</span></span><br><span class="line">    <span class="comment">//情况1：插入的newNode是第一个节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">  <span class="comment">//原链表不为空</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//情况2：position == 0</span></span><br><span class="line">    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    <span class="comment">//情况3：position == this.length </span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length)&#123;</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      <span class="comment">//情况4：0 &lt; position &lt; this.length</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//修改pos位置前后节点变量的指向</span></span><br><span class="line">      newNode.next = current;</span><br><span class="line">      newNode.prev = current.prev;</span><br><span class="line">      current.prev.next = newNode;</span><br><span class="line">      current.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//4.length+1</span></span><br><span class="line">  <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//返回true表示插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//测试代码</span></span><br><span class="line">   <span class="comment">//1.创建双向链表</span></span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试insert方法</span></span><br><span class="line">   list.insert(<span class="number">0</span>, <span class="string">&#x27;插入链表的第一个元素&#x27;</span>);</span><br><span class="line">   list.insert(<span class="number">0</span>, <span class="string">&#x27;在链表首部插入元素&#x27;</span>);</span><br><span class="line">   list.insert(<span class="number">1</span>, <span class="string">&#x27;在链表中间插入元素&#x27;</span>);</span><br><span class="line">   list.insert(<span class="number">3</span>, <span class="string">&#x27;在链表尾部插入元素&#x27;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/19.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/19.png" alt="image-20200228130748735"></a></p>
<br>

<h4 id="4-get-position"><a href="#4-get-position" class="headerlink" title="4. get(position)"></a>4. get(position)</h4><p><strong>过程详解：</strong></p>
<p>定义两个变量current和index，按照之前的思路通过while循环遍历分别获取当前节点和对应的索引值index，直到找到需要获取的position位置后的一个节点，此时index = position =x，然后 <code>return current.data</code> 即可。</p>
<p>如果链表的节点数量很多时，这种查找方式效率不高，改进方法为：</p>
<blockquote>
<p>一定要通过this.length来获取链表的节点数否则就会报错。</p>
</blockquote>
<ul>
<li>当this.length / 2 &gt; position：从头（head）开始遍历；</li>
<li>当this.length / 2 &lt; position：从尾（tail）开始遍历；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/20.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/20.png" alt="image-20200228144005347"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get方法</span></span><br><span class="line">DoubleLinklist.prototype.get = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.越界判断</span></span><br><span class="line">    <span class="comment">//获取元素时position不能等于length</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.获取元素</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//this.length / 2 &gt; position:从头开始遍历</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">this</span>.length / <span class="number">2</span>) &gt; position) &#123;</span><br><span class="line">    current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//this.length / 2 =&lt; position:从尾开始遍历</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    current = <span class="built_in">this</span>.tail;</span><br><span class="line">    index = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index-- &gt; position)&#123;</span><br><span class="line">    current = current.prev;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//测试代码</span></span><br><span class="line"> <span class="comment">//1.创建双向链表</span></span><br><span class="line"> <span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//2.测试get方法</span></span><br><span class="line"> list.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b1&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b3&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b4&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b5&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b6&#x27;</span>);</span><br><span class="line"> list.append(<span class="string">&#x27;b7&#x27;</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(list.get(<span class="number">0</span>));</span><br><span class="line"> <span class="built_in">console</span>.log(list.get(<span class="number">7</span>));</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/21.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/21.png" alt="image-20200228145413524"></a></p>
<br>

<h4 id="5-indexOf-element-1"><a href="#5-indexOf-element-1" class="headerlink" title="5. indexOf(element)"></a>5. indexOf(element)</h4><p><strong>过程详解：</strong></p>
<p>以（current）作为条件，通过while循环遍历链表中的所有节点（停止条件为current = null）。在遍历每个节点时将current指向的当前节点的data和传入的data进行比较即可。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//indexOf方法</span></span><br><span class="line">DoubleLinklist.prototype.indexOf = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.定义变量</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.遍历链表，查找与data相同的节点</span></span><br><span class="line">  <span class="keyword">while</span>(current)&#123;</span><br><span class="line">    <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.next;</span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建双向链表</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试indexOf方法</span></span><br><span class="line">list.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list.indexOf(<span class="string">&#x27;c&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/23.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/23.png" alt="image-20200228150612681"></a></p>
<br>

<h4 id="6-update-position-element-1"><a href="#6-update-position-element-1" class="headerlink" title="6. update(position,element)"></a>6. update(position,element)</h4><p><strong>过程详解：</strong></p>
<p>以（index++ &lt; position）为条件，通过while循环遍历链表中的节点（停止条件为index = position）。循环结束后，current指向需要修改的节点。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//update方法</span></span><br><span class="line"> DoubleLinklist.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//1.越界判断</span></span><br><span class="line">   <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.寻找正确的节点</span></span><br><span class="line">   <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">   <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//this.length / 2 &gt; position:从头开始遍历</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.length / <span class="number">2</span> &gt; position) &#123;</span><br><span class="line">     <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">     current = current.next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//this.length / 2 =&lt; position:从尾开始遍历</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     current = <span class="built_in">this</span>.tail;</span><br><span class="line">     index = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span> (index -- &gt; position) &#123;</span><br><span class="line">       current = current.prev;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.修改找到节点的data</span></span><br><span class="line">   current.data = newData;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//表示成功修改</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//1.创建双向链表</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试update方法</span></span><br><span class="line">list.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">list.append(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list.update(<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/25.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/25.png" alt="image-20200228151340638"></a></p>
<br>

<h4 id="7-removeAt-position-1"><a href="#7-removeAt-position-1" class="headerlink" title="7. removeAt(position)"></a>7. removeAt(position)</h4><p><strong>过程详解：</strong></p>
<p>删除节点时有多种情况：</p>
<p><strong>当链表的length = 1时</strong>：</p>
<ul>
<li>情况1：删除链表中的所有节点：只需要让链表的head和tail指向null即可。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/26.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/26.png" alt="image-20200228153331976"></a></p>
<p><strong>当链表的length &gt; 1时</strong>：</p>
<ul>
<li><p>情况2：删除链表中的第一个节点：</p>
<p>通过：<code>this.head.next.prev = null</code>，改变指向1；</p>
<p>通过：<code>this.head = this.head.next</code>，改变指向2；</p>
<p>虽然Node1有引用指向其它节点，但是没有引用指向Node1，那么Node1会被自动回收。</p>
</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/27.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/27.png" alt="image-20200228162347115"></a></p>
<ul>
<li><p>情况3：删除链表中的最后一个节点：</p>
<p>通过：<code>this.tail.prev.next = null</code>，修改指向1；</p>
<p>通过：<code>this.tail = this.tail.prev</code>，修改指向2；</p>
</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/28.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/28.png" alt="image-20200228161946691"></a></p>
<ul>
<li>情况4：删除链表中间的节点：</li>
</ul>
<p>通过while循环找到需要删除的节点，比如position = x，那么需要删除的节点就是Node(x+1)，如下图所示：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/29.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/29.png" alt="image-20200228161648125"></a></p>
<p>通过：<code>current.next.prev = current.prev</code>，修改指向1；</p>
<p>通过：<code>current.prev.next = current.next</code>，修改指向2；</p>
<p>这样就没有引用指向Node(x+1)了（current虽指向Node(x+1)，但current时临时变量，该方法执行完就会被销毁），随后Node(x+1)就会被自动删除。</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/30.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/30.png" alt="image-20200228162415044"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//removeAt方法</span></span><br><span class="line"> DoubleLinklist.prototype.removeAt = <span class="function"><span class="params">position</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//1.越界判断</span></span><br><span class="line">   <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2.删除节点</span></span><br><span class="line">   <span class="comment">//当链表中length == 1</span></span><br><span class="line">   <span class="comment">//情况1：链表只有一个节点</span></span><br><span class="line">   <span class="keyword">let</span> current = <span class="built_in">this</span>.head<span class="comment">//定义在最上面方便以下各种情况返回current.data</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">     <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//当链表中length &gt; 1</span></span><br><span class="line">   &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">//情况2：删除第一个节点</span></span><br><span class="line">     <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.head.next.prev = <span class="literal">null</span>;</span><br><span class="line">       <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">     <span class="comment">//情况3：删除最后一个节点</span></span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length - <span class="number">1</span>)&#123;</span><br><span class="line">       current = <span class="built_in">this</span>.tail;<span class="comment">//该情况下返回被删除的最后一个节点</span></span><br><span class="line">       <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">       <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="comment">//情况4：删除链表中间的节点</span></span><br><span class="line">       <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">       <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">         current = current.next;</span><br><span class="line">       &#125;</span><br><span class="line">       current.next.prev = current.prev;</span><br><span class="line">       current.prev.next = current.next;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.length -= 1;</span></span><br><span class="line">   <span class="built_in">this</span>.length -= <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> current.data;  <span class="comment">//返回被删除节点的数据</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//测试代码</span></span><br><span class="line">   <span class="comment">//1.创建双向链表</span></span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();	</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试removeAt方法</span></span><br><span class="line">   list.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">   list.append(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">   list.append(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(list.removeAt(<span class="number">1</span>));</span><br><span class="line">   <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/31.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/31.png" alt="image-20200228163935060"></a></p>
<br>

<h4 id="8-其他方法-1"><a href="#8-其他方法-1" class="headerlink" title="8. 其他方法"></a>8. 其他方法</h4><p>其他方法包括：<strong>remove(element)、isEmpty()、size()、getHead()、getTail()</strong></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--------------------其他方法-------------------*/</span></span><br><span class="line"><span class="comment">//八.remove方法</span></span><br><span class="line">DoubleLinklist.prototype.remove = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.根据data获取下标值</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(data);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//2.根据index删除对应位置的节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//九.isEmpty方法</span></span><br><span class="line">DoubleLinklist.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十.size方法</span></span><br><span class="line">DoubleLinklist.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十一.getHead方法：获取链表的第一个元素</span></span><br><span class="line">DoubleLinklist.prototype.getHead = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.head.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十二.getTail方法：获取链表的最后一个元素</span></span><br><span class="line">DoubleLinklist.prototype.getTail = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.tail.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    <span class="comment">//1.创建双向链表</span></span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> DoubleLinklist();	</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------其他方法的测试--------------*/</span></span><br><span class="line">    list.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    list.append(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    list.append(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    list.append(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="comment">//remove方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(list.remove(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(list);</span><br><span class="line">    <span class="comment">//isEmpty方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(list.isEmpty());</span><br><span class="line">    <span class="comment">//size方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(list.size());</span><br><span class="line">    <span class="comment">//getHead方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(list.getHead());</span><br><span class="line">    <span class="comment">//getTead方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(list.getTail());</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/32.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/32.png" alt="image-20200228165845014"></a></p>
<br>

<h4 id="9-完整实现-1"><a href="#9-完整实现-1" class="headerlink" title="9. 完整实现"></a>9. 完整实现</h4><h5 id="1-function类实现-1"><a href="#1-function类实现-1" class="headerlink" title="1) function类实现"></a>1) function类实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装双向链表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoubleLinklist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//封装内部类：节点类</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.tail ==<span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一.append方法</span></span><br><span class="line">  DoubleLinklist.prototype.append = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode ;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//二.将链表转变为字符串形式</span></span><br><span class="line">  <span class="comment">//2.1.toString方法</span></span><br><span class="line">  DoubleLinklist.prototype.toString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.backwardString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.2.forwardString方法</span></span><br><span class="line">  DoubleLinklist.prototype.forwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current =<span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      resultString += current.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      current = current.prev ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.3.backwardString方法</span></span><br><span class="line">  DoubleLinklist.prototype.backwardString = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      resultString += current.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//三.insert方法</span></span><br><span class="line">  DoubleLinklist.prototype.insert = <span class="function">(<span class="params">position, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length)&#123;</span><br><span class="line">        <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">        newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">          current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = current;</span><br><span class="line">        newNode.prev = current.prev;</span><br><span class="line">        current.prev.next = newNode;</span><br><span class="line">        current.prev = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四.get方法</span></span><br><span class="line">  DoubleLinklist.prototype.get = <span class="function"><span class="params">position</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">this</span>.length / <span class="number">2</span>) &gt; position) &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      current = <span class="built_in">this</span>.tail;</span><br><span class="line">      index = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span>(index-- &gt; position)&#123;</span><br><span class="line">      current = current.prev;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//五.indexOf方法</span></span><br><span class="line">  DoubleLinklist.prototype.indexOf = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">      <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">//六.update方法</span></span><br><span class="line">  DoubleLinklist.prototype.update = <span class="function">(<span class="params">position, newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length / <span class="number">2</span> &gt; position) &#123;</span><br><span class="line">      <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      current = <span class="built_in">this</span>.tail;</span><br><span class="line">      index = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (index -- &gt; position) &#123;</span><br><span class="line">        current = current.prev;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    current.data = newData;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//七.removeAt方法</span></span><br><span class="line">  DoubleLinklist.prototype.removeAt = <span class="function"><span class="params">position</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head.next.prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length - <span class="number">1</span>)&#123;</span><br><span class="line">        current = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">          current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next.prev = current.prev;</span><br><span class="line">        current.prev.next = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//八.remove方法</span></span><br><span class="line">  DoubleLinklist.prototype.remove = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.indexOf(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//九.isEmpty方法</span></span><br><span class="line">  DoubleLinklist.prototype.isEmpty = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//十.size方法</span></span><br><span class="line">  DoubleLinklist.prototype.size = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//十一.getHead方法：获取链表的第一个元素</span></span><br><span class="line">  DoubleLinklist.prototype.getHead = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//十二.getTail方法：获取链表的最后一个元素</span></span><br><span class="line">  DoubleLinklist.prototype.getTail = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tail.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-class类实现-1"><a href="#2-class类实现-1" class="headerlink" title="2) class类实现"></a>2) class类实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line">  <span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line">  <span class="comment">// 重写 append()</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">      <span class="comment">// 巧妙之处</span></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line">  <span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getData(position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.indexOf(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 removeAt()</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123; <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123; <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">      currentNode.next.perv = previousNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 update()</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">    <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(data) 删除指定 data 所在的节点（继承单向链表）</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.remove(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>学习笔记</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>学习笔记</tag>
        <tag>JavaScript</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
